declare module 'tinkerforge' {
	export class IPConnection {
		static readonly CALLBACK_ENUMERATE: number;
		static readonly CALLBACK_CONNECTED: number;
		static readonly CALLBACK_DISCONNECTED: number;
		static readonly BROADCAST_UID: number;
		static readonly ENUMERATION_TYPE_AVAILABLE: number;
		static readonly ENUMERATION_TYPE_CONNECTED: number;
		static readonly ENUMERATION_TYPE_DISCONNECTED: number;
		static readonly CONNECT_REASON_REQUEST: number;
		static readonly CONNECT_REASON_AUTO_RECONNECT: number;
		static readonly DISCONNECT_REASON_REQUEST: number;
		static readonly DISCONNECT_REASON_ERROR: number;
		static readonly DISCONNECT_REASON_SHUTDOWN: number;
		static readonly CONNECTION_STATE_DISCONNECTED: number;
		static readonly CONNECTION_STATE_CONNECTED: number;
		static readonly CONNECTION_STATE_PENDING: number;
		static readonly DISCONNECT_PROBE_INTERVAL: number;
		static readonly RETRY_CONNECTION_INTERVAL: number;
		static readonly ERROR_ALREADY_CONNECTED: number;
		static readonly ERROR_NOT_CONNECTED: number;
		static readonly ERROR_CONNECT_FAILED: number;
		static readonly ERROR_INVALID_FUNCTION_ID: number;
		static readonly ERROR_TIMEOUT: number;
		static readonly ERROR_INVALID_PARAMETER: number;
		static readonly ERROR_FUNCTION_NOT_SUPPORTED: number;
		static readonly ERROR_UNKNOWN_ERROR: number;
		static readonly ERROR_STREAM_OUT_OF_SYNC: number;
		static readonly TASK_KIND_CONNECT: number;
		static readonly TASK_KIND_DISCONNECT: number;
		static readonly TASK_KIND_AUTO_RECONNECT: number;
		static readonly TASK_KIND_AUTHENTICATE: number;

		constructor(uid: string|number, ip: IPConnection);

		disconnectProbe(): void;
		pushTask(handler: any, kind: any): void;
		executeTask(): void;
		popTask(): void;
		removeNextTask(): void;
		getCurrentTaskKind(): void;
		getNextTaskKind(): void;
		disconnect(error: (error: number) => void): void;
		disconnectInternal(error: (error: number) => void): void;
		connect(host: any, port: any, error: (error: number) => void): void;
		connectInternal(host: any, port: any, error: (error: number) => void): void;
		handleConnect(): void;
		handleIncomingData(data: any): void;
		handleConnectionError(error: any): void;
		handleAutoReconnectError(error: any): void;
		handleConnectionClose(): void;
		resetDisconnectProbe(): void;
		getUIDFromPacket(packetUID: any): void;
		getLengthFromPacket(packetLen: any): void;
		getFunctionIDFromPacket(packetFID: any): void;
		getSequenceNumberFromPacket(packetSeq: any): void;
		getRFromPacket(packetR: any): void;
		getEFromPacket(packetE: any): void;
		getPayloadFromPacket(packetPayload: any): void;
		pack(data: any, format: any): void;
		unpack(unpackPayload: any, format: any): void;
		sendRequest(sendRequestDevice: any): void;
		sendRequestTimeout(timeoutDevice: any, timeoutDeviceOID: any, timeoutErrorCB: any): void;
		sendRequestTimeoutStreamOut(timeoutDevice: any, timeoutFID: any, timeoutErrorCB: any): void;
		handleResponse(packetResponse: any): void;
		handleCallback(packetCallback: any): void;
		handlePacket(packet: any): void;
		getConnectionState(): void;
		setAutoReconnect(autoReconnect: any): void;
		getAutoReconnect(): void;
		setTimeout(timeout: any): void;
		getTimeout(): void;
		enumerate(error: (error: number) => void): void;
		getRandomUInt32(returnCallback: any): void;
		authenticateInternal(secret: any, returnCallback: any, error: (error: number) => void): void;
		authenticate(secret: any, returnCallback: any, error: (error: number) => void): void;
		on(callbackID: any, function_: any): void;
		getNextSequenceNumber(): void;
		createPacketHeader(headerDevice: any, headerLength: any, headerFunctionID: any, headerErrorCB: any): void;
		createChunkData(data: any, chunkOffset: any, chunkLength: any, chunkPadding: any): void;
	}

	export class BrickDC {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_UNDER_VOLTAGE: number;
		static readonly CALLBACK_EMERGENCY_SHUTDOWN: number;
		static readonly CALLBACK_VELOCITY_REACHED: number;
		static readonly CALLBACK_CURRENT_VELOCITY: number;
		static readonly DRIVE_MODE_DRIVE_BRAKE: number;
		static readonly DRIVE_MODE_DRIVE_COAST: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setVelocity(velocity: any, returnCallback: any, error: (error: number) => void): void;
		getVelocity(returnCallback: any, error: (error: number) => void): void;
		getCurrentVelocity(returnCallback: any, error: (error: number) => void): void;
		setAcceleration(acceleration: any, returnCallback: any, error: (error: number) => void): void;
		getAcceleration(returnCallback: any, error: (error: number) => void): void;
		setPWMFrequency(frequency: any, returnCallback: any, error: (error: number) => void): void;
		getPWMFrequency(returnCallback: any, error: (error: number) => void): void;
		fullBrake(returnCallback: any, error: (error: number) => void): void;
		getStackInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getExternalInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getCurrentConsumption(returnCallback: any, error: (error: number) => void): void;
		enable(returnCallback: any, error: (error: number) => void): void;
		disable(returnCallback: any, error: (error: number) => void): void;
		isEnabled(returnCallback: any, error: (error: number) => void): void;
		setMinimumVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getMinimumVoltage(returnCallback: any, error: (error: number) => void): void;
		setDriveMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getDriveMode(returnCallback: any, error: (error: number) => void): void;
		setCurrentVelocityPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentVelocityPeriod(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickIMU {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ACCELERATION: number;
		static readonly CALLBACK_MAGNETIC_FIELD: number;
		static readonly CALLBACK_ANGULAR_VELOCITY: number;
		static readonly CALLBACK_ALL_DATA: number;
		static readonly CALLBACK_ORIENTATION: number;
		static readonly CALLBACK_QUATERNION: number;
		static readonly CALIBRATION_TYPE_ACCELEROMETER_GAIN: number;
		static readonly CALIBRATION_TYPE_ACCELEROMETER_BIAS: number;
		static readonly CALIBRATION_TYPE_MAGNETOMETER_GAIN: number;
		static readonly CALIBRATION_TYPE_MAGNETOMETER_BIAS: number;
		static readonly CALIBRATION_TYPE_GYROSCOPE_GAIN: number;
		static readonly CALIBRATION_TYPE_GYROSCOPE_BIAS: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAcceleration(returnCallback: any, error: (error: number) => void): void;
		getMagneticField(returnCallback: any, error: (error: number) => void): void;
		getAngularVelocity(returnCallback: any, error: (error: number) => void): void;
		getAllData(returnCallback: any, error: (error: number) => void): void;
		getOrientation(returnCallback: any, error: (error: number) => void): void;
		getQuaternion(returnCallback: any, error: (error: number) => void): void;
		getIMUTemperature(returnCallback: any, error: (error: number) => void): void;
		ledsOn(returnCallback: any, error: (error: number) => void): void;
		ledsOff(returnCallback: any, error: (error: number) => void): void;
		areLedsOn(returnCallback: any, error: (error: number) => void): void;
		setAccelerationRange(range: any, returnCallback: any, error: (error: number) => void): void;
		getAccelerationRange(returnCallback: any, error: (error: number) => void): void;
		setMagnetometerRange(range: any, returnCallback: any, error: (error: number) => void): void;
		getMagnetometerRange(returnCallback: any, error: (error: number) => void): void;
		setConvergenceSpeed(speed: any, returnCallback: any, error: (error: number) => void): void;
		getConvergenceSpeed(returnCallback: any, error: (error: number) => void): void;
		setCalibration(typ: any, data: any, returnCallback: any, error: (error: number) => void): void;
		getCalibration(typ: any, returnCallback: any, error: (error: number) => void): void;
		setAccelerationPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAccelerationPeriod(returnCallback: any, error: (error: number) => void): void;
		setMagneticFieldPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getMagneticFieldPeriod(returnCallback: any, error: (error: number) => void): void;
		setAngularVelocityPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAngularVelocityPeriod(returnCallback: any, error: (error: number) => void): void;
		setAllDataPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAllDataPeriod(returnCallback: any, error: (error: number) => void): void;
		setOrientationPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getOrientationPeriod(returnCallback: any, error: (error: number) => void): void;
		setQuaternionPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getQuaternionPeriod(returnCallback: any, error: (error: number) => void): void;
		orientationCalculationOn(returnCallback: any, error: (error: number) => void): void;
		orientationCalculationOff(returnCallback: any, error: (error: number) => void): void;
		isOrientationCalculationOn(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickIMUV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ACCELERATION: number;
		static readonly CALLBACK_MAGNETIC_FIELD: number;
		static readonly CALLBACK_ANGULAR_VELOCITY: number;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_LINEAR_ACCELERATION: number;
		static readonly CALLBACK_GRAVITY_VECTOR: number;
		static readonly CALLBACK_ORIENTATION: number;
		static readonly CALLBACK_QUATERNION: number;
		static readonly CALLBACK_ALL_DATA: number;
		static readonly MAGNETOMETER_RATE_2HZ: number;
		static readonly MAGNETOMETER_RATE_6HZ: number;
		static readonly MAGNETOMETER_RATE_8HZ: number;
		static readonly MAGNETOMETER_RATE_10HZ: number;
		static readonly MAGNETOMETER_RATE_15HZ: number;
		static readonly MAGNETOMETER_RATE_20HZ: number;
		static readonly MAGNETOMETER_RATE_25HZ: number;
		static readonly MAGNETOMETER_RATE_30HZ: number;
		static readonly GYROSCOPE_RANGE_2000DPS: number;
		static readonly GYROSCOPE_RANGE_1000DPS: number;
		static readonly GYROSCOPE_RANGE_500DPS: number;
		static readonly GYROSCOPE_RANGE_250DPS: number;
		static readonly GYROSCOPE_RANGE_125DPS: number;
		static readonly GYROSCOPE_BANDWIDTH_523HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_230HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_116HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_47HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_23HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_12HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_64HZ: number;
		static readonly GYROSCOPE_BANDWIDTH_32HZ: number;
		static readonly ACCELEROMETER_RANGE_2G: number;
		static readonly ACCELEROMETER_RANGE_4G: number;
		static readonly ACCELEROMETER_RANGE_8G: number;
		static readonly ACCELEROMETER_RANGE_16G: number;
		static readonly ACCELEROMETER_BANDWIDTH_7_81HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_15_63HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_31_25HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_62_5HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_125HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_250HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_500HZ: number;
		static readonly ACCELEROMETER_BANDWIDTH_1000HZ: number;
		static readonly SENSOR_FUSION_OFF: number;
		static readonly SENSOR_FUSION_ON: number;
		static readonly SENSOR_FUSION_ON_WITHOUT_MAGNETOMETER: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAcceleration(returnCallback: any, error: (error: number) => void): void;
		getMagneticField(returnCallback: any, error: (error: number) => void): void;
		getAngularVelocity(returnCallback: any, error: (error: number) => void): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		getOrientation(returnCallback: any, error: (error: number) => void): void;
		getLinearAcceleration(returnCallback: any, error: (error: number) => void): void;
		getGravityVector(returnCallback: any, error: (error: number) => void): void;
		getQuaternion(returnCallback: any, error: (error: number) => void): void;
		getAllData(returnCallback: any, error: (error: number) => void): void;
		ledsOn(returnCallback: any, error: (error: number) => void): void;
		ledsOff(returnCallback: any, error: (error: number) => void): void;
		areLedsOn(returnCallback: any, error: (error: number) => void): void;
		saveCalibration(returnCallback: any, error: (error: number) => void): void;
		setAccelerationPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAccelerationPeriod(returnCallback: any, error: (error: number) => void): void;
		setMagneticFieldPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getMagneticFieldPeriod(returnCallback: any, error: (error: number) => void): void;
		setAngularVelocityPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAngularVelocityPeriod(returnCallback: any, error: (error: number) => void): void;
		setTemperaturePeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getTemperaturePeriod(returnCallback: any, error: (error: number) => void): void;
		setOrientationPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getOrientationPeriod(returnCallback: any, error: (error: number) => void): void;
		setLinearAccelerationPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getLinearAccelerationPeriod(returnCallback: any, error: (error: number) => void): void;
		setGravityVectorPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getGravityVectorPeriod(returnCallback: any, error: (error: number) => void): void;
		setQuaternionPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getQuaternionPeriod(returnCallback: any, error: (error: number) => void): void;
		setAllDataPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAllDataPeriod(returnCallback: any, error: (error: number) => void): void;
		setSensorConfiguration(magnetometerRate: any, gyroscopeRange: any, gyroscopeBandwidth: any, accelerometerRange: any, accelerometerBandwidth: any, returnCallback: any, error: (error: number) => void): void;
		getSensorConfiguration(returnCallback: any, error: (error: number) => void): void;
		setSensorFusionMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getSensorFusionMode(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickMaster {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_STACK_CURRENT: number;
		static readonly CALLBACK_STACK_VOLTAGE: number;
		static readonly CALLBACK_USB_VOLTAGE: number;
		static readonly CALLBACK_STACK_CURRENT_REACHED: number;
		static readonly CALLBACK_STACK_VOLTAGE_REACHED: number;
		static readonly CALLBACK_USB_VOLTAGE_REACHED: number;
		static readonly EXTENSION_TYPE_CHIBI: number;
		static readonly EXTENSION_TYPE_RS485: number;
		static readonly EXTENSION_TYPE_WIFI: number;
		static readonly EXTENSION_TYPE_ETHERNET: number;
		static readonly EXTENSION_TYPE_WIFI2: number;
		static readonly CHIBI_FREQUENCY_OQPSK_868_MHZ: number;
		static readonly CHIBI_FREQUENCY_OQPSK_915_MHZ: number;
		static readonly CHIBI_FREQUENCY_OQPSK_780_MHZ: number;
		static readonly CHIBI_FREQUENCY_BPSK40_915_MHZ: number;
		static readonly RS485_PARITY_NONE: string;
		static readonly RS485_PARITY_EVEN: string;
		static readonly RS485_PARITY_ODD: string;
		static readonly WIFI_CONNECTION_DHCP: number;
		static readonly WIFI_CONNECTION_STATIC_IP: number;
		static readonly WIFI_CONNECTION_ACCESS_POINT_DHCP: number;
		static readonly WIFI_CONNECTION_ACCESS_POINT_STATIC_IP: number;
		static readonly WIFI_CONNECTION_AD_HOC_DHCP: number;
		static readonly WIFI_CONNECTION_AD_HOC_STATIC_IP: number;
		static readonly WIFI_ENCRYPTION_WPA_WPA2: number;
		static readonly WIFI_ENCRYPTION_WPA_ENTERPRISE: number;
		static readonly WIFI_ENCRYPTION_WEP: number;
		static readonly WIFI_ENCRYPTION_NO_ENCRYPTION: number;
		static readonly WIFI_EAP_OPTION_OUTER_AUTH_EAP_FAST: number;
		static readonly WIFI_EAP_OPTION_OUTER_AUTH_EAP_TLS: number;
		static readonly WIFI_EAP_OPTION_OUTER_AUTH_EAP_TTLS: number;
		static readonly WIFI_EAP_OPTION_OUTER_AUTH_EAP_PEAP: number;
		static readonly WIFI_EAP_OPTION_INNER_AUTH_EAP_MSCHAP: number;
		static readonly WIFI_EAP_OPTION_INNER_AUTH_EAP_GTC: number;
		static readonly WIFI_EAP_OPTION_CERT_TYPE_CA_CERT: number;
		static readonly WIFI_EAP_OPTION_CERT_TYPE_CLIENT_CERT: number;
		static readonly WIFI_EAP_OPTION_CERT_TYPE_PRIVATE_KEY: number;
		static readonly WIFI_STATE_DISASSOCIATED: number;
		static readonly WIFI_STATE_ASSOCIATED: number;
		static readonly WIFI_STATE_ASSOCIATING: number;
		static readonly WIFI_STATE_ERROR: number;
		static readonly WIFI_STATE_NOT_INITIALIZED_YET: number;
		static readonly WIFI_POWER_MODE_FULL_SPEED: number;
		static readonly WIFI_POWER_MODE_LOW_POWER: number;
		static readonly WIFI_DOMAIN_CHANNEL_1TO11: number;
		static readonly WIFI_DOMAIN_CHANNEL_1TO13: number;
		static readonly WIFI_DOMAIN_CHANNEL_1TO14: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly ETHERNET_CONNECTION_DHCP: number;
		static readonly ETHERNET_CONNECTION_STATIC_IP: number;
		static readonly CONNECTION_TYPE_NONE: number;
		static readonly CONNECTION_TYPE_USB: number;
		static readonly CONNECTION_TYPE_SPI_STACK: number;
		static readonly CONNECTION_TYPE_CHIBI: number;
		static readonly CONNECTION_TYPE_RS485: number;
		static readonly CONNECTION_TYPE_WIFI: number;
		static readonly CONNECTION_TYPE_ETHERNET: number;
		static readonly CONNECTION_TYPE_WIFI2: number;
		static readonly WIFI2_PHY_MODE_B: number;
		static readonly WIFI2_PHY_MODE_G: number;
		static readonly WIFI2_PHY_MODE_N: number;
		static readonly WIFI2_CLIENT_STATUS_IDLE: number;
		static readonly WIFI2_CLIENT_STATUS_CONNECTING: number;
		static readonly WIFI2_CLIENT_STATUS_WRONG_PASSWORD: number;
		static readonly WIFI2_CLIENT_STATUS_NO_AP_FOUND: number;
		static readonly WIFI2_CLIENT_STATUS_CONNECT_FAILED: number;
		static readonly WIFI2_CLIENT_STATUS_GOT_IP: number;
		static readonly WIFI2_CLIENT_STATUS_UNKNOWN: number;
		static readonly WIFI2_AP_ENCRYPTION_OPEN: number;
		static readonly WIFI2_AP_ENCRYPTION_WEP: number;
		static readonly WIFI2_AP_ENCRYPTION_WPA_PSK: number;
		static readonly WIFI2_AP_ENCRYPTION_WPA2_PSK: number;
		static readonly WIFI2_AP_ENCRYPTION_WPA_WPA2_PSK: number;
		static readonly WIFI2_MESH_STATUS_DISABLED: number;
		static readonly WIFI2_MESH_STATUS_WIFI_CONNECTING: number;
		static readonly WIFI2_MESH_STATUS_GOT_IP: number;
		static readonly WIFI2_MESH_STATUS_MESH_LOCAL: number;
		static readonly WIFI2_MESH_STATUS_MESH_ONLINE: number;
		static readonly WIFI2_MESH_STATUS_AP_AVAILABLE: number;
		static readonly WIFI2_MESH_STATUS_AP_SETUP: number;
		static readonly WIFI2_MESH_STATUS_LEAF_AVAILABLE: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getStackVoltage(returnCallback: any, error: (error: number) => void): void;
		getStackCurrent(returnCallback: any, error: (error: number) => void): void;
		setExtensionType(extension: any, exttype: any, returnCallback: any, error: (error: number) => void): void;
		getExtensionType(extension: any, returnCallback: any, error: (error: number) => void): void;
		isChibiPresent(returnCallback: any, error: (error: number) => void): void;
		setChibiAddress(address: any, returnCallback: any, error: (error: number) => void): void;
		getChibiAddress(returnCallback: any, error: (error: number) => void): void;
		setChibiMasterAddress(address: any, returnCallback: any, error: (error: number) => void): void;
		getChibiMasterAddress(returnCallback: any, error: (error: number) => void): void;
		setChibiSlaveAddress(num: any, address: any, returnCallback: any, error: (error: number) => void): void;
		getChibiSlaveAddress(num: any, returnCallback: any, error: (error: number) => void): void;
		getChibiSignalStrength(returnCallback: any, error: (error: number) => void): void;
		getChibiErrorLog(returnCallback: any, error: (error: number) => void): void;
		setChibiFrequency(frequency: any, returnCallback: any, error: (error: number) => void): void;
		getChibiFrequency(returnCallback: any, error: (error: number) => void): void;
		setChibiChannel(channel: any, returnCallback: any, error: (error: number) => void): void;
		getChibiChannel(returnCallback: any, error: (error: number) => void): void;
		isRS485Present(returnCallback: any, error: (error: number) => void): void;
		setRS485Address(address: any, returnCallback: any, error: (error: number) => void): void;
		getRS485Address(returnCallback: any, error: (error: number) => void): void;
		setRS485SlaveAddress(num: any, address: any, returnCallback: any, error: (error: number) => void): void;
		getRS485SlaveAddress(num: any, returnCallback: any, error: (error: number) => void): void;
		getRS485ErrorLog(returnCallback: any, error: (error: number) => void): void;
		setRS485Configuration(speed: any, parity: any, stopbits: any, returnCallback: any, error: (error: number) => void): void;
		getRS485Configuration(returnCallback: any, error: (error: number) => void): void;
		isWifiPresent(returnCallback: any, error: (error: number) => void): void;
		setWifiConfiguration(ssid: any, connection: any, ip: any, subnetMask: any, gateway: any, port: any, returnCallback: any, error: (error: number) => void): void;
		getWifiConfiguration(returnCallback: any, error: (error: number) => void): void;
		setWifiEncryption(encryption: any, key: any, keyIndex: any, eapOptions: any, caCertificateLength: any, clientCertificateLength: any, privateKeyLength: any, returnCallback: any, error: (error: number) => void): void;
		getWifiEncryption(returnCallback: any, error: (error: number) => void): void;
		getWifiStatus(returnCallback: any, error: (error: number) => void): void;
		refreshWifiStatus(returnCallback: any, error: (error: number) => void): void;
		setWifiCertificate(index: any, data: any, dataLength: any, returnCallback: any, error: (error: number) => void): void;
		getWifiCertificate(index: any, returnCallback: any, error: (error: number) => void): void;
		setWifiPowerMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getWifiPowerMode(returnCallback: any, error: (error: number) => void): void;
		getWifiBufferInfo(returnCallback: any, error: (error: number) => void): void;
		setWifiRegulatoryDomain(domain: any, returnCallback: any, error: (error: number) => void): void;
		getWifiRegulatoryDomain(returnCallback: any, error: (error: number) => void): void;
		getUSBVoltage(returnCallback: any, error: (error: number) => void): void;
		setLongWifiKey(key: any, returnCallback: any, error: (error: number) => void): void;
		getLongWifiKey(returnCallback: any, error: (error: number) => void): void;
		setWifiHostname(hostname: any, returnCallback: any, error: (error: number) => void): void;
		getWifiHostname(returnCallback: any, error: (error: number) => void): void;
		setStackCurrentCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getStackCurrentCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setStackVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getStackVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setUSBVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getUSBVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setStackCurrentCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getStackCurrentCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setStackVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getStackVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setUSBVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getUSBVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		isEthernetPresent(returnCallback: any, error: (error: number) => void): void;
		setEthernetConfiguration(connection: any, ip: any, subnetMask: any, gateway: any, port: any, returnCallback: any, error: (error: number) => void): void;
		getEthernetConfiguration(returnCallback: any, error: (error: number) => void): void;
		getEthernetStatus(returnCallback: any, error: (error: number) => void): void;
		setEthernetHostname(hostname: any, returnCallback: any, error: (error: number) => void): void;
		setEthernetMACAddress(macAddress: any, returnCallback: any, error: (error: number) => void): void;
		setEthernetWebsocketConfiguration(sockets: any, port: any, returnCallback: any, error: (error: number) => void): void;
		getEthernetWebsocketConfiguration(returnCallback: any, error: (error: number) => void): void;
		setEthernetAuthenticationSecret(secret: any, returnCallback: any, error: (error: number) => void): void;
		getEthernetAuthenticationSecret(returnCallback: any, error: (error: number) => void): void;
		setWifiAuthenticationSecret(secret: any, returnCallback: any, error: (error: number) => void): void;
		getWifiAuthenticationSecret(returnCallback: any, error: (error: number) => void): void;
		getConnectionType(returnCallback: any, error: (error: number) => void): void;
		isWifi2Present(returnCallback: any, error: (error: number) => void): void;
		startWifi2Bootloader(returnCallback: any, error: (error: number) => void): void;
		writeWifi2SerialPort(data: any, length: any, returnCallback: any, error: (error: number) => void): void;
		readWifi2SerialPort(length: any, returnCallback: any, error: (error: number) => void): void;
		setWifi2AuthenticationSecret(secret: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2AuthenticationSecret(returnCallback: any, error: (error: number) => void): void;
		setWifi2Configuration(port: any, websocketPort: any, websitePort: any, phyMode: any, sleepMode: any, website: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2Configuration(returnCallback: any, error: (error: number) => void): void;
		getWifi2Status(returnCallback: any, error: (error: number) => void): void;
		setWifi2ClientConfiguration(enable: any, ssid: any, ip: any, subnetMask: any, gateway: any, macAddress: any, bssid: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2ClientConfiguration(returnCallback: any, error: (error: number) => void): void;
		setWifi2ClientHostname(hostname: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2ClientHostname(returnCallback: any, error: (error: number) => void): void;
		setWifi2ClientPassword(password: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2ClientPassword(returnCallback: any, error: (error: number) => void): void;
		setWifi2APConfiguration(enable: any, ssid: any, ip: any, subnetMask: any, gateway: any, encryption: any, hidden: any, channel: any, macAddress: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2APConfiguration(returnCallback: any, error: (error: number) => void): void;
		setWifi2APPassword(password: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2APPassword(returnCallback: any, error: (error: number) => void): void;
		saveWifi2Configuration(returnCallback: any, error: (error: number) => void): void;
		getWifi2FirmwareVersion(returnCallback: any, error: (error: number) => void): void;
		enableWifi2StatusLED(returnCallback: any, error: (error: number) => void): void;
		disableWifi2StatusLED(returnCallback: any, error: (error: number) => void): void;
		isWifi2StatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		setWifi2MeshConfiguration(enable: any, rootIP: any, rootSubnetMask: any, rootGateway: any, routerBSSID: any, groupID: any, groupSSIDPrefix: any, gatewayIP: any, gatewayPort: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshConfiguration(returnCallback: any, error: (error: number) => void): void;
		setWifi2MeshRouterSSID(ssid: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshRouterSSID(returnCallback: any, error: (error: number) => void): void;
		setWifi2MeshRouterPassword(password: any, returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshRouterPassword(returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshCommonStatus(returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshClientStatus(returnCallback: any, error: (error: number) => void): void;
		getWifi2MeshAPStatus(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickRED {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ASYNC_FILE_READ: number;
		static readonly CALLBACK_ASYNC_FILE_WRITE: number;
		static readonly CALLBACK_FILE_EVENTS_OCCURRED: number;
		static readonly CALLBACK_PROCESS_STATE_CHANGED: number;
		static readonly CALLBACK_PROGRAM_SCHEDULER_STATE_CHANGED: number;
		static readonly CALLBACK_PROGRAM_PROCESS_SPAWNED: number;
		static readonly ERROR_CODE_SUCCESS: number;
		static readonly ERROR_CODE_UNKNOWN_ERROR: number;
		static readonly ERROR_CODE_INVALID_OPERATION: number;
		static readonly ERROR_CODE_OPERATION_ABORTED: number;
		static readonly ERROR_CODE_INTERNAL_ERROR: number;
		static readonly ERROR_CODE_UNKNOWN_SESSION_ID: number;
		static readonly ERROR_CODE_NO_FREE_SESSION_ID: number;
		static readonly ERROR_CODE_UNKNOWN_OBJECT_ID: number;
		static readonly ERROR_CODE_NO_FREE_OBJECT_ID: number;
		static readonly ERROR_CODE_OBJECT_IS_LOCKED: number;
		static readonly ERROR_CODE_NO_MORE_DATA: number;
		static readonly ERROR_CODE_WRONG_LIST_ITEM_TYPE: number;
		static readonly ERROR_CODE_PROGRAM_IS_PURGED: number;
		static readonly ERROR_CODE_INVALID_PARAMETER: number;
		static readonly ERROR_CODE_NO_FREE_MEMORY: number;
		static readonly ERROR_CODE_NO_FREE_SPACE: number;
		static readonly ERROR_CODE_ACCESS_DENIED: number;
		static readonly ERROR_CODE_ALREADY_EXISTS: number;
		static readonly ERROR_CODE_DOES_NOT_EXIST: number;
		static readonly ERROR_CODE_INTERRUPTED: number;
		static readonly ERROR_CODE_IS_DIRECTORY: number;
		static readonly ERROR_CODE_NOT_A_DIRECTORY: number;
		static readonly ERROR_CODE_WOULD_BLOCK: number;
		static readonly ERROR_CODE_OVERFLOW: number;
		static readonly ERROR_CODE_BAD_FILE_DESCRIPTOR: number;
		static readonly ERROR_CODE_OUT_OF_RANGE: number;
		static readonly ERROR_CODE_NAME_TOO_LONG: number;
		static readonly ERROR_CODE_INVALID_SEEK: number;
		static readonly ERROR_CODE_NOT_SUPPORTED: number;
		static readonly ERROR_CODE_TOO_MANY_OPEN_FILES: number;
		static readonly OBJECT_TYPE_STRING: number;
		static readonly OBJECT_TYPE_LIST: number;
		static readonly OBJECT_TYPE_FILE: number;
		static readonly OBJECT_TYPE_DIRECTORY: number;
		static readonly OBJECT_TYPE_PROCESS: number;
		static readonly OBJECT_TYPE_PROGRAM: number;
		static readonly FILE_FLAG_READ_ONLY: number;
		static readonly FILE_FLAG_WRITE_ONLY: number;
		static readonly FILE_FLAG_READ_WRITE: number;
		static readonly FILE_FLAG_APPEND: number;
		static readonly FILE_FLAG_CREATE: number;
		static readonly FILE_FLAG_EXCLUSIVE: number;
		static readonly FILE_FLAG_NON_BLOCKING: number;
		static readonly FILE_FLAG_TRUNCATE: number;
		static readonly FILE_FLAG_TEMPORARY: number;
		static readonly FILE_FLAG_REPLACE: number;
		static readonly FILE_PERMISSION_USER_ALL: number;
		static readonly FILE_PERMISSION_USER_READ: number;
		static readonly FILE_PERMISSION_USER_WRITE: number;
		static readonly FILE_PERMISSION_USER_EXECUTE: number;
		static readonly FILE_PERMISSION_GROUP_ALL: number;
		static readonly FILE_PERMISSION_GROUP_READ: number;
		static readonly FILE_PERMISSION_GROUP_WRITE: number;
		static readonly FILE_PERMISSION_GROUP_EXECUTE: number;
		static readonly FILE_PERMISSION_OTHERS_ALL: number;
		static readonly FILE_PERMISSION_OTHERS_READ: number;
		static readonly FILE_PERMISSION_OTHERS_WRITE: number;
		static readonly FILE_PERMISSION_OTHERS_EXECUTE: number;
		static readonly PIPE_FLAG_NON_BLOCKING_READ: number;
		static readonly PIPE_FLAG_NON_BLOCKING_WRITE: number;
		static readonly FILE_TYPE_UNKNOWN: number;
		static readonly FILE_TYPE_REGULAR: number;
		static readonly FILE_TYPE_DIRECTORY: number;
		static readonly FILE_TYPE_CHARACTER: number;
		static readonly FILE_TYPE_BLOCK: number;
		static readonly FILE_TYPE_FIFO: number;
		static readonly FILE_TYPE_SYMLINK: number;
		static readonly FILE_TYPE_SOCKET: number;
		static readonly FILE_TYPE_PIPE: number;
		static readonly FILE_ORIGIN_BEGINNING: number;
		static readonly FILE_ORIGIN_CURRENT: number;
		static readonly FILE_ORIGIN_END: number;
		static readonly FILE_EVENT_READABLE: number;
		static readonly FILE_EVENT_WRITABLE: number;
		static readonly DIRECTORY_ENTRY_TYPE_UNKNOWN: number;
		static readonly DIRECTORY_ENTRY_TYPE_REGULAR: number;
		static readonly DIRECTORY_ENTRY_TYPE_DIRECTORY: number;
		static readonly DIRECTORY_ENTRY_TYPE_CHARACTER: number;
		static readonly DIRECTORY_ENTRY_TYPE_BLOCK: number;
		static readonly DIRECTORY_ENTRY_TYPE_FIFO: number;
		static readonly DIRECTORY_ENTRY_TYPE_SYMLINK: number;
		static readonly DIRECTORY_ENTRY_TYPE_SOCKET: number;
		static readonly DIRECTORY_FLAG_RECURSIVE: number;
		static readonly DIRECTORY_FLAG_EXCLUSIVE: number;
		static readonly PROCESS_SIGNAL_INTERRUPT: number;
		static readonly PROCESS_SIGNAL_QUIT: number;
		static readonly PROCESS_SIGNAL_ABORT: number;
		static readonly PROCESS_SIGNAL_KILL: number;
		static readonly PROCESS_SIGNAL_USER1: number;
		static readonly PROCESS_SIGNAL_USER2: number;
		static readonly PROCESS_SIGNAL_TERMINATE: number;
		static readonly PROCESS_SIGNAL_CONTINUE: number;
		static readonly PROCESS_SIGNAL_STOP: number;
		static readonly PROCESS_STATE_UNKNOWN: number;
		static readonly PROCESS_STATE_RUNNING: number;
		static readonly PROCESS_STATE_ERROR: number;
		static readonly PROCESS_STATE_EXITED: number;
		static readonly PROCESS_STATE_KILLED: number;
		static readonly PROCESS_STATE_STOPPED: number;
		static readonly PROGRAM_STDIO_REDIRECTION_DEV_NULL: number;
		static readonly PROGRAM_STDIO_REDIRECTION_PIPE: number;
		static readonly PROGRAM_STDIO_REDIRECTION_FILE: number;
		static readonly PROGRAM_STDIO_REDIRECTION_INDIVIDUAL_LOG: number;
		static readonly PROGRAM_STDIO_REDIRECTION_CONTINUOUS_LOG: number;
		static readonly PROGRAM_STDIO_REDIRECTION_STDOUT: number;
		static readonly PROGRAM_START_MODE_NEVER: number;
		static readonly PROGRAM_START_MODE_ALWAYS: number;
		static readonly PROGRAM_START_MODE_INTERVAL: number;
		static readonly PROGRAM_START_MODE_CRON: number;
		static readonly PROGRAM_SCHEDULER_STATE_STOPPED: number;
		static readonly PROGRAM_SCHEDULER_STATE_RUNNING: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		createSession(lifetime: any, returnCallback: any, error: (error: number) => void): void;
		expireSession(sessionId: any, returnCallback: any, error: (error: number) => void): void;
		expireSessionUnchecked(sessionId: any, returnCallback: any, error: (error: number) => void): void;
		keepSessionAlive(sessionId: any, lifetime: any, returnCallback: any, error: (error: number) => void): void;
		releaseObject(objectId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		releaseObjectUnchecked(objectId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		allocateString(lengthToReserve: any, buffer: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		truncateString(stringId: any, length: any, returnCallback: any, error: (error: number) => void): void;
		getStringLength(stringId: any, returnCallback: any, error: (error: number) => void): void;
		setStringChunk(stringId: any, offset: any, buffer: any, returnCallback: any, error: (error: number) => void): void;
		getStringChunk(stringId: any, offset: any, returnCallback: any, error: (error: number) => void): void;
		allocateList(lengthToReserve: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getListLength(listId: any, returnCallback: any, error: (error: number) => void): void;
		getListItem(listId: any, index: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		appendToList(listId: any, itemObjectId: any, returnCallback: any, error: (error: number) => void): void;
		removeFromList(listId: any, index: any, returnCallback: any, error: (error: number) => void): void;
		openFile(nameStringId: any, flags: any, permissions: any, uid: any, gid: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		createPipe(flags: any, length: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getFileInfo(fileId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		readFile(fileId: any, lengthToRead: any, returnCallback: any, error: (error: number) => void): void;
		readFileAsync(fileId: any, lengthToRead: any, returnCallback: any, error: (error: number) => void): void;
		abortAsyncFileRead(fileId: any, returnCallback: any, error: (error: number) => void): void;
		writeFile(fileId: any, buffer: any, lengthToWrite: any, returnCallback: any, error: (error: number) => void): void;
		writeFileUnchecked(fileId: any, buffer: any, lengthToWrite: any, returnCallback: any, error: (error: number) => void): void;
		writeFileAsync(fileId: any, buffer: any, lengthToWrite: any, returnCallback: any, error: (error: number) => void): void;
		setFilePosition(fileId: any, offset: any, origin: any, returnCallback: any, error: (error: number) => void): void;
		getFilePosition(fileId: any, returnCallback: any, error: (error: number) => void): void;
		setFileEvents(fileId: any, events: any, returnCallback: any, error: (error: number) => void): void;
		getFileEvents(fileId: any, returnCallback: any, error: (error: number) => void): void;
		openDirectory(nameStringId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getDirectoryName(directoryId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getNextDirectoryEntry(directoryId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		rewindDirectory(directoryId: any, returnCallback: any, error: (error: number) => void): void;
		createDirectory(nameStringId: any, flags: any, permissions: any, uid: any, gid: any, returnCallback: any, error: (error: number) => void): void;
		getProcesses(sessionId: any, returnCallback: any, error: (error: number) => void): void;
		spawnProcess(executableStringId: any, argumentsListId: any, environmentListId: any, workingDirectoryStringId: any, uid: any, gid: any, stdinFileId: any, stdoutFileId: any, stderrFileId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		killProcess(processId: any, signal: any, returnCallback: any, error: (error: number) => void): void;
		getProcessCommand(processId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getProcessIdentity(processId: any, returnCallback: any, error: (error: number) => void): void;
		getProcessStdio(processId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getProcessState(processId: any, returnCallback: any, error: (error: number) => void): void;
		getPrograms(sessionId: any, returnCallback: any, error: (error: number) => void): void;
		defineProgram(identifierStringId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		purgeProgram(programId: any, cookie: any, returnCallback: any, error: (error: number) => void): void;
		getProgramIdentifier(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getProgramRootDirectory(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		setProgramCommand(programId: any, executableStringId: any, argumentsListId: any, environmentListId: any, workingDirectoryStringId: any, returnCallback: any, error: (error: number) => void): void;
		getProgramCommand(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		setProgramStdioRedirection(programId: any, stdinRedirection: any, stdinFileNameStringId: any, stdoutRedirection: any, stdoutFileNameStringId: any, stderrRedirection: any, stderrFileNameStringId: any, returnCallback: any, error: (error: number) => void): void;
		getProgramStdioRedirection(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		setProgramSchedule(programId: any, startMode: any, continueAfterError: any, startInterval: any, startFieldsStringId: any, returnCallback: any, error: (error: number) => void): void;
		getProgramSchedule(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getProgramSchedulerState(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		continueProgramSchedule(programId: any, returnCallback: any, error: (error: number) => void): void;
		startProgram(programId: any, returnCallback: any, error: (error: number) => void): void;
		getLastSpawnedProgramProcess(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		getCustomProgramOptionNames(programId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		setCustomProgramOptionValue(programId: any, nameStringId: any, valueStringId: any, returnCallback: any, error: (error: number) => void): void;
		getCustomProgramOptionValue(programId: any, nameStringId: any, sessionId: any, returnCallback: any, error: (error: number) => void): void;
		removeCustomProgramOption(programId: any, nameStringId: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickServo {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_UNDER_VOLTAGE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_VELOCITY_REACHED: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		enable(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		disable(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		isEnabled(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setPosition(servoNum: any, position: any, returnCallback: any, error: (error: number) => void): void;
		getPosition(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentPosition(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setVelocity(servoNum: any, velocity: any, returnCallback: any, error: (error: number) => void): void;
		getVelocity(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentVelocity(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setAcceleration(servoNum: any, acceleration: any, returnCallback: any, error: (error: number) => void): void;
		getAcceleration(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setOutputVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getOutputVoltage(returnCallback: any, error: (error: number) => void): void;
		setPulseWidth(servoNum: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPulseWidth(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setDegree(servoNum: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDegree(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		setPeriod(servoNum: any, period: any, returnCallback: any, error: (error: number) => void): void;
		getPeriod(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		getServoCurrent(servoNum: any, returnCallback: any, error: (error: number) => void): void;
		getOverallCurrent(returnCallback: any, error: (error: number) => void): void;
		getStackInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getExternalInputVoltage(returnCallback: any, error: (error: number) => void): void;
		setMinimumVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getMinimumVoltage(returnCallback: any, error: (error: number) => void): void;
		enablePositionReachedCallback(returnCallback: any, error: (error: number) => void): void;
		disablePositionReachedCallback(returnCallback: any, error: (error: number) => void): void;
		isPositionReachedCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		enableVelocityReachedCallback(returnCallback: any, error: (error: number) => void): void;
		disableVelocityReachedCallback(returnCallback: any, error: (error: number) => void): void;
		isVelocityReachedCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickSilentStepper {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_UNDER_VOLTAGE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_ALL_DATA: number;
		static readonly CALLBACK_NEW_STATE: number;
		static readonly STEP_RESOLUTION_1: number;
		static readonly STEP_RESOLUTION_2: number;
		static readonly STEP_RESOLUTION_4: number;
		static readonly STEP_RESOLUTION_8: number;
		static readonly STEP_RESOLUTION_16: number;
		static readonly STEP_RESOLUTION_32: number;
		static readonly STEP_RESOLUTION_64: number;
		static readonly STEP_RESOLUTION_128: number;
		static readonly STEP_RESOLUTION_256: number;
		static readonly CHOPPER_MODE_SPREAD_CYCLE: number;
		static readonly CHOPPER_MODE_FAST_DECAY: number;
		static readonly FREEWHEEL_MODE_NORMAL: number;
		static readonly FREEWHEEL_MODE_FREEWHEELING: number;
		static readonly FREEWHEEL_MODE_COIL_SHORT_LS: number;
		static readonly FREEWHEEL_MODE_COIL_SHORT_HS: number;
		static readonly CURRENT_UP_STEP_INCREMENT_1: number;
		static readonly CURRENT_UP_STEP_INCREMENT_2: number;
		static readonly CURRENT_UP_STEP_INCREMENT_4: number;
		static readonly CURRENT_UP_STEP_INCREMENT_8: number;
		static readonly CURRENT_DOWN_STEP_DECREMENT_1: number;
		static readonly CURRENT_DOWN_STEP_DECREMENT_2: number;
		static readonly CURRENT_DOWN_STEP_DECREMENT_8: number;
		static readonly CURRENT_DOWN_STEP_DECREMENT_32: number;
		static readonly MINIMUM_CURRENT_HALF: number;
		static readonly MINIMUM_CURRENT_QUARTER: number;
		static readonly STALLGUARD_MODE_STANDARD: number;
		static readonly STALLGUARD_MODE_FILTERED: number;
		static readonly OPEN_LOAD_NONE: number;
		static readonly OPEN_LOAD_PHASE_A: number;
		static readonly OPEN_LOAD_PHASE_B: number;
		static readonly OPEN_LOAD_PHASE_AB: number;
		static readonly SHORT_TO_GROUND_NONE: number;
		static readonly SHORT_TO_GROUND_PHASE_A: number;
		static readonly SHORT_TO_GROUND_PHASE_B: number;
		static readonly SHORT_TO_GROUND_PHASE_AB: number;
		static readonly OVER_TEMPERATURE_NONE: number;
		static readonly OVER_TEMPERATURE_WARNING: number;
		static readonly OVER_TEMPERATURE_LIMIT: number;
		static readonly STATE_STOP: number;
		static readonly STATE_ACCELERATION: number;
		static readonly STATE_RUN: number;
		static readonly STATE_DEACCELERATION: number;
		static readonly STATE_DIRECTION_CHANGE_TO_FORWARD: number;
		static readonly STATE_DIRECTION_CHANGE_TO_BACKWARD: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setMaxVelocity(velocity: any, returnCallback: any, error: (error: number) => void): void;
		getMaxVelocity(returnCallback: any, error: (error: number) => void): void;
		getCurrentVelocity(returnCallback: any, error: (error: number) => void): void;
		setSpeedRamping(acceleration: any, deacceleration: any, returnCallback: any, error: (error: number) => void): void;
		getSpeedRamping(returnCallback: any, error: (error: number) => void): void;
		fullBrake(returnCallback: any, error: (error: number) => void): void;
		setCurrentPosition(position: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentPosition(returnCallback: any, error: (error: number) => void): void;
		setTargetPosition(position: any, returnCallback: any, error: (error: number) => void): void;
		getTargetPosition(returnCallback: any, error: (error: number) => void): void;
		setSteps(steps: any, returnCallback: any, error: (error: number) => void): void;
		getSteps(returnCallback: any, error: (error: number) => void): void;
		getRemainingSteps(returnCallback: any, error: (error: number) => void): void;
		setStepConfiguration(stepResolution: any, interpolation: any, returnCallback: any, error: (error: number) => void): void;
		getStepConfiguration(returnCallback: any, error: (error: number) => void): void;
		driveForward(returnCallback: any, error: (error: number) => void): void;
		driveBackward(returnCallback: any, error: (error: number) => void): void;
		stop(returnCallback: any, error: (error: number) => void): void;
		getStackInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getExternalInputVoltage(returnCallback: any, error: (error: number) => void): void;
		setMotorCurrent(current: any, returnCallback: any, error: (error: number) => void): void;
		getMotorCurrent(returnCallback: any, error: (error: number) => void): void;
		enable(returnCallback: any, error: (error: number) => void): void;
		disable(returnCallback: any, error: (error: number) => void): void;
		isEnabled(returnCallback: any, error: (error: number) => void): void;
		setBasicConfiguration(standstillCurrent: any, motorRunCurrent: any, standstillDelayTime: any, powerDownTime: any, stealthThreshold: any, coolstepThreshold: any, classicThreshold: any, highVelocityChopperMode: any, returnCallback: any, error: (error: number) => void): void;
		getBasicConfiguration(returnCallback: any, error: (error: number) => void): void;
		setSpreadcycleConfiguration(slowDecayDuration: any, enableRandomSlowDecay: any, fastDecayDuration: any, hysteresisStartValue: any, hysteresisEndValue: any, sineWaveOffset: any, chopperMode: any, comparatorBlankTime: any, fastDecayWithoutComparator: any, returnCallback: any, error: (error: number) => void): void;
		getSpreadcycleConfiguration(returnCallback: any, error: (error: number) => void): void;
		setStealthConfiguration(enableStealth: any, amplitude: any, gradient: any, enableAutoscale: any, forceSymmetric: any, freewheelMode: any, returnCallback: any, error: (error: number) => void): void;
		getStealthConfiguration(returnCallback: any, error: (error: number) => void): void;
		setCoolstepConfiguration(minimumStallguardValue: any, maximumStallguardValue: any, currentUpStepWidth: any, currentDownStepWidth: any, minimumCurrent: any, stallguardThresholdValue: any, stallguardMode: any, returnCallback: any, error: (error: number) => void): void;
		getCoolstepConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMiscConfiguration(disableShortToGroundProtection: any, synchronizePhaseFrequency: any, returnCallback: any, error: (error: number) => void): void;
		getMiscConfiguration(returnCallback: any, error: (error: number) => void): void;
		getDriverStatus(returnCallback: any, error: (error: number) => void): void;
		setMinimumVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getMinimumVoltage(returnCallback: any, error: (error: number) => void): void;
		setTimeBase(timeBase: any, returnCallback: any, error: (error: number) => void): void;
		getTimeBase(returnCallback: any, error: (error: number) => void): void;
		getAllData(returnCallback: any, error: (error: number) => void): void;
		setAllDataPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAllDataPeriod(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickStepper {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_UNDER_VOLTAGE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_ALL_DATA: number;
		static readonly CALLBACK_NEW_STATE: number;
		static readonly STEP_MODE_FULL_STEP: number;
		static readonly STEP_MODE_HALF_STEP: number;
		static readonly STEP_MODE_QUARTER_STEP: number;
		static readonly STEP_MODE_EIGHTH_STEP: number;
		static readonly STATE_STOP: number;
		static readonly STATE_ACCELERATION: number;
		static readonly STATE_RUN: number;
		static readonly STATE_DEACCELERATION: number;
		static readonly STATE_DIRECTION_CHANGE_TO_FORWARD: number;
		static readonly STATE_DIRECTION_CHANGE_TO_BACKWARD: number;
		static readonly COMMUNICATION_METHOD_NONE: number;
		static readonly COMMUNICATION_METHOD_USB: number;
		static readonly COMMUNICATION_METHOD_SPI_STACK: number;
		static readonly COMMUNICATION_METHOD_CHIBI: number;
		static readonly COMMUNICATION_METHOD_RS485: number;
		static readonly COMMUNICATION_METHOD_WIFI: number;
		static readonly COMMUNICATION_METHOD_ETHERNET: number;
		static readonly COMMUNICATION_METHOD_WIFI_V2: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setMaxVelocity(velocity: any, returnCallback: any, error: (error: number) => void): void;
		getMaxVelocity(returnCallback: any, error: (error: number) => void): void;
		getCurrentVelocity(returnCallback: any, error: (error: number) => void): void;
		setSpeedRamping(acceleration: any, deacceleration: any, returnCallback: any, error: (error: number) => void): void;
		getSpeedRamping(returnCallback: any, error: (error: number) => void): void;
		fullBrake(returnCallback: any, error: (error: number) => void): void;
		setCurrentPosition(position: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentPosition(returnCallback: any, error: (error: number) => void): void;
		setTargetPosition(position: any, returnCallback: any, error: (error: number) => void): void;
		getTargetPosition(returnCallback: any, error: (error: number) => void): void;
		setSteps(steps: any, returnCallback: any, error: (error: number) => void): void;
		getSteps(returnCallback: any, error: (error: number) => void): void;
		getRemainingSteps(returnCallback: any, error: (error: number) => void): void;
		setStepMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getStepMode(returnCallback: any, error: (error: number) => void): void;
		driveForward(returnCallback: any, error: (error: number) => void): void;
		driveBackward(returnCallback: any, error: (error: number) => void): void;
		stop(returnCallback: any, error: (error: number) => void): void;
		getStackInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getExternalInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getCurrentConsumption(returnCallback: any, error: (error: number) => void): void;
		setMotorCurrent(current: any, returnCallback: any, error: (error: number) => void): void;
		getMotorCurrent(returnCallback: any, error: (error: number) => void): void;
		enable(returnCallback: any, error: (error: number) => void): void;
		disable(returnCallback: any, error: (error: number) => void): void;
		isEnabled(returnCallback: any, error: (error: number) => void): void;
		setDecay(decay: any, returnCallback: any, error: (error: number) => void): void;
		getDecay(returnCallback: any, error: (error: number) => void): void;
		setMinimumVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getMinimumVoltage(returnCallback: any, error: (error: number) => void): void;
		setSyncRect(syncRect: any, returnCallback: any, error: (error: number) => void): void;
		isSyncRect(returnCallback: any, error: (error: number) => void): void;
		setTimeBase(timeBase: any, returnCallback: any, error: (error: number) => void): void;
		getTimeBase(returnCallback: any, error: (error: number) => void): void;
		getAllData(returnCallback: any, error: (error: number) => void): void;
		setAllDataPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAllDataPeriod(returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrateConfig(enableDynamicBaudrate: any, minimumDynamicBaudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrateConfig(returnCallback: any, error: (error: number) => void): void;
		getSendTimeoutCount(communicationMethod: any, returnCallback: any, error: (error: number) => void): void;
		setSPITFPBaudrate(brickletPort: any, baudrate: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPBaudrate(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(brickletPort: any, returnCallback: any, error: (error: number) => void): void;
		enableStatusLED(returnCallback: any, error: (error: number) => void): void;
		disableStatusLED(returnCallback: any, error: (error: number) => void): void;
		isStatusLEDEnabled(returnCallback: any, error: (error: number) => void): void;
		getProtocol1BrickletName(port: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAccelerometer {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ACCELERATION: number;
		static readonly CALLBACK_ACCELERATION_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly DATA_RATE_OFF: number;
		static readonly DATA_RATE_3HZ: number;
		static readonly DATA_RATE_6HZ: number;
		static readonly DATA_RATE_12HZ: number;
		static readonly DATA_RATE_25HZ: number;
		static readonly DATA_RATE_50HZ: number;
		static readonly DATA_RATE_100HZ: number;
		static readonly DATA_RATE_400HZ: number;
		static readonly DATA_RATE_800HZ: number;
		static readonly DATA_RATE_1600HZ: number;
		static readonly FULL_SCALE_2G: number;
		static readonly FULL_SCALE_4G: number;
		static readonly FULL_SCALE_6G: number;
		static readonly FULL_SCALE_8G: number;
		static readonly FULL_SCALE_16G: number;
		static readonly FILTER_BANDWIDTH_800HZ: number;
		static readonly FILTER_BANDWIDTH_400HZ: number;
		static readonly FILTER_BANDWIDTH_200HZ: number;
		static readonly FILTER_BANDWIDTH_50HZ: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAcceleration(returnCallback: any, error: (error: number) => void): void;
		setAccelerationCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAccelerationCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAccelerationCallbackThreshold(option: any, minX: any, maxX: any, minY: any, maxY: any, minZ: any, maxZ: any, returnCallback: any, error: (error: number) => void): void;
		getAccelerationCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(dataRate: any, fullScale: any, filterBandwidth: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		ledOn(returnCallback: any, error: (error: number) => void): void;
		ledOff(returnCallback: any, error: (error: number) => void): void;
		isLEDOn(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAmbientLight {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ILLUMINANCE: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_ILLUMINANCE_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getIlluminance(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setIlluminanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getIlluminanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setIlluminanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getIlluminanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAmbientLightV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ILLUMINANCE: number;
		static readonly CALLBACK_ILLUMINANCE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly ILLUMINANCE_RANGE_UNLIMITED: number;
		static readonly ILLUMINANCE_RANGE_64000LUX: number;
		static readonly ILLUMINANCE_RANGE_32000LUX: number;
		static readonly ILLUMINANCE_RANGE_16000LUX: number;
		static readonly ILLUMINANCE_RANGE_8000LUX: number;
		static readonly ILLUMINANCE_RANGE_1300LUX: number;
		static readonly ILLUMINANCE_RANGE_600LUX: number;
		static readonly INTEGRATION_TIME_50MS: number;
		static readonly INTEGRATION_TIME_100MS: number;
		static readonly INTEGRATION_TIME_150MS: number;
		static readonly INTEGRATION_TIME_200MS: number;
		static readonly INTEGRATION_TIME_250MS: number;
		static readonly INTEGRATION_TIME_300MS: number;
		static readonly INTEGRATION_TIME_350MS: number;
		static readonly INTEGRATION_TIME_400MS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getIlluminance(returnCallback: any, error: (error: number) => void): void;
		setIlluminanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getIlluminanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setIlluminanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getIlluminanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(illuminanceRange: any, integrationTime: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAnalogIn {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_VOLTAGE_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly RANGE_AUTOMATIC: number;
		static readonly RANGE_UP_TO_6V: number;
		static readonly RANGE_UP_TO_10V: number;
		static readonly RANGE_UP_TO_36V: number;
		static readonly RANGE_UP_TO_45V: number;
		static readonly RANGE_UP_TO_3V: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setRange(range: any, returnCallback: any, error: (error: number) => void): void;
		getRange(returnCallback: any, error: (error: number) => void): void;
		setAveraging(average: any, returnCallback: any, error: (error: number) => void): void;
		getAveraging(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAnalogInV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_VOLTAGE_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAnalogInV3 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly OVERSAMPLING_32: number;
		static readonly OVERSAMPLING_64: number;
		static readonly OVERSAMPLING_128: number;
		static readonly OVERSAMPLING_256: number;
		static readonly OVERSAMPLING_512: number;
		static readonly OVERSAMPLING_1024: number;
		static readonly OVERSAMPLING_2048: number;
		static readonly OVERSAMPLING_4096: number;
		static readonly OVERSAMPLING_8192: number;
		static readonly OVERSAMPLING_16384: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setOversampling(oversampling: any, returnCallback: any, error: (error: number) => void): void;
		getOversampling(returnCallback: any, error: (error: number) => void): void;
		setCalibration(offset: any, multiplier: any, divisor: any, returnCallback: any, error: (error: number) => void): void;
		getCalibration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAnalogOut {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly MODE_ANALOG_VALUE: number;
		static readonly MODE_1K_TO_GROUND: number;
		static readonly MODE_100K_TO_GROUND: number;
		static readonly MODE_500K_TO_GROUND: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		setMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getMode(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletAnalogOutV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setOutputVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getOutputVoltage(returnCallback: any, error: (error: number) => void): void;
		getInputVoltage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletBarometer {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_AIR_PRESSURE: number;
		static readonly CALLBACK_ALTITUDE: number;
		static readonly CALLBACK_AIR_PRESSURE_REACHED: number;
		static readonly CALLBACK_ALTITUDE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAirPressure(returnCallback: any, error: (error: number) => void): void;
		getAltitude(returnCallback: any, error: (error: number) => void): void;
		setAirPressureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAirPressureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAltitudeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAltitudeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAirPressureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAirPressureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAltitudeCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAltitudeCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setReferenceAirPressure(airPressure: any, returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		getReferenceAirPressure(returnCallback: any, error: (error: number) => void): void;
		setAveraging(movingAveragePressure: any, averagePressure: any, averageTemperature: any, returnCallback: any, error: (error: number) => void): void;
		getAveraging(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletCAN {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_READ: number;
		static readonly FRAME_TYPE_STANDARD_DATA: number;
		static readonly FRAME_TYPE_STANDARD_REMOTE: number;
		static readonly FRAME_TYPE_EXTENDED_DATA: number;
		static readonly FRAME_TYPE_EXTENDED_REMOTE: number;
		static readonly BAUD_RATE_10KBPS: number;
		static readonly BAUD_RATE_20KBPS: number;
		static readonly BAUD_RATE_50KBPS: number;
		static readonly BAUD_RATE_125KBPS: number;
		static readonly BAUD_RATE_250KBPS: number;
		static readonly BAUD_RATE_500KBPS: number;
		static readonly BAUD_RATE_800KBPS: number;
		static readonly BAUD_RATE_1000KBPS: number;
		static readonly TRANSCEIVER_MODE_NORMAL: number;
		static readonly TRANSCEIVER_MODE_LOOPBACK: number;
		static readonly TRANSCEIVER_MODE_READ_ONLY: number;
		static readonly FILTER_MODE_DISABLED: number;
		static readonly FILTER_MODE_ACCEPT_ALL: number;
		static readonly FILTER_MODE_MATCH_STANDARD: number;
		static readonly FILTER_MODE_MATCH_STANDARD_AND_DATA: number;
		static readonly FILTER_MODE_MATCH_EXTENDED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeFrame(frameType: any, identifier: any, data: any, length: any, returnCallback: any, error: (error: number) => void): void;
		readFrame(returnCallback: any, error: (error: number) => void): void;
		enableFrameReadCallback(returnCallback: any, error: (error: number) => void): void;
		disableFrameReadCallback(returnCallback: any, error: (error: number) => void): void;
		isFrameReadCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(baudRate: any, transceiverMode: any, writeTimeout: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setReadFilter(mode: any, mask: any, filter1: any, filter2: any, returnCallback: any, error: (error: number) => void): void;
		getReadFilter(returnCallback: any, error: (error: number) => void): void;
		getErrorLog(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletCANV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_READ_LOW_LEVEL: number;
		static readonly CALLBACK_FRAME_READ: number;
		static readonly FRAME_TYPE_STANDARD_DATA: number;
		static readonly FRAME_TYPE_STANDARD_REMOTE: number;
		static readonly FRAME_TYPE_EXTENDED_DATA: number;
		static readonly FRAME_TYPE_EXTENDED_REMOTE: number;
		static readonly TRANSCEIVER_MODE_NORMAL: number;
		static readonly TRANSCEIVER_MODE_LOOPBACK: number;
		static readonly TRANSCEIVER_MODE_READ_ONLY: number;
		static readonly FILTER_MODE_ACCEPT_ALL: number;
		static readonly FILTER_MODE_MATCH_STANDARD_ONLY: number;
		static readonly FILTER_MODE_MATCH_EXTENDED_ONLY: number;
		static readonly FILTER_MODE_MATCH_STANDARD_AND_EXTENDED: number;
		static readonly TRANSCEIVER_STATE_ACTIVE: number;
		static readonly TRANSCEIVER_STATE_PASSIVE: number;
		static readonly TRANSCEIVER_STATE_DISABLED: number;
		static readonly COMMUNICATION_LED_CONFIG_OFF: number;
		static readonly COMMUNICATION_LED_CONFIG_ON: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION: number;
		static readonly ERROR_LED_CONFIG_OFF: number;
		static readonly ERROR_LED_CONFIG_ON: number;
		static readonly ERROR_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly ERROR_LED_CONFIG_SHOW_TRANSCEIVER_STATE: number;
		static readonly ERROR_LED_CONFIG_SHOW_ERROR: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeFrameLowLevel(frameType: any, identifier: any, dataLength: any, dataData: any, returnCallback: any, error: (error: number) => void): void;
		readFrameLowLevel(returnCallback: any, error: (error: number) => void): void;
		setFrameReadCallbackConfiguration(enabled: any, returnCallback: any, error: (error: number) => void): void;
		getFrameReadCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setTransceiverConfiguration(baudRate: any, samplePoint: any, transceiverMode: any, returnCallback: any, error: (error: number) => void): void;
		getTransceiverConfiguration(returnCallback: any, error: (error: number) => void): void;
		setQueueConfigurationLowLevel(writeBufferSize: any, writeBufferTimeout: any, writeBacklogSize: any, readBufferSizesLength: any, readBufferSizesData: any, readBacklogSize: any, returnCallback: any, error: (error: number) => void): void;
		getQueueConfigurationLowLevel(returnCallback: any, error: (error: number) => void): void;
		setReadFilterConfiguration(bufferIndex: any, filterMode: any, filterMask: any, filterIdentifier: any, returnCallback: any, error: (error: number) => void): void;
		getReadFilterConfiguration(bufferIndex: any, returnCallback: any, error: (error: number) => void): void;
		getErrorLogLowLevel(returnCallback: any, error: (error: number) => void): void;
		setCommunicationLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getCommunicationLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setErrorLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getErrorLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		writeFrame(frameType: any, identifier: any, data: any, returnCallback: any, error: (error: number) => void): void;
		readFrame(returnCallback: any, error: (error: number) => void): void;
		setQueueConfiguration(writeBufferSize: any, writeBufferTimeout: any, writeBacklogSize: any, readBufferSizes: any, readBacklogSize: any, returnCallback: any, error: (error: number) => void): void;
		getQueueConfiguration(returnCallback: any, error: (error: number) => void): void;
		getErrorLog(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletCO2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CO2_CONCENTRATION: number;
		static readonly CALLBACK_CO2_CONCENTRATION_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCO2Concentration(returnCallback: any, error: (error: number) => void): void;
		setCO2ConcentrationCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCO2ConcentrationCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setCO2ConcentrationCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCO2ConcentrationCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletColor {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_COLOR: number;
		static readonly CALLBACK_COLOR_REACHED: number;
		static readonly CALLBACK_ILLUMINANCE: number;
		static readonly CALLBACK_COLOR_TEMPERATURE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly LIGHT_ON: number;
		static readonly LIGHT_OFF: number;
		static readonly GAIN_1X: number;
		static readonly GAIN_4X: number;
		static readonly GAIN_16X: number;
		static readonly GAIN_60X: number;
		static readonly INTEGRATION_TIME_2MS: number;
		static readonly INTEGRATION_TIME_24MS: number;
		static readonly INTEGRATION_TIME_101MS: number;
		static readonly INTEGRATION_TIME_154MS: number;
		static readonly INTEGRATION_TIME_700MS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getColor(returnCallback: any, error: (error: number) => void): void;
		setColorCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getColorCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setColorCallbackThreshold(option: any, minR: any, maxR: any, minG: any, maxG: any, minB: any, maxB: any, minC: any, maxC: any, returnCallback: any, error: (error: number) => void): void;
		getColorCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		lightOn(returnCallback: any, error: (error: number) => void): void;
		lightOff(returnCallback: any, error: (error: number) => void): void;
		isLightOn(returnCallback: any, error: (error: number) => void): void;
		setConfig(gain: any, integrationTime: any, returnCallback: any, error: (error: number) => void): void;
		getConfig(returnCallback: any, error: (error: number) => void): void;
		getIlluminance(returnCallback: any, error: (error: number) => void): void;
		getColorTemperature(returnCallback: any, error: (error: number) => void): void;
		setIlluminanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getIlluminanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setColorTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getColorTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletCurrent12 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CURRENT: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_CURRENT_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly CALLBACK_OVER_CURRENT: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCurrent(returnCallback: any, error: (error: number) => void): void;
		calibrate(returnCallback: any, error: (error: number) => void): void;
		isOverCurrent(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletCurrent25 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CURRENT: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_CURRENT_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly CALLBACK_OVER_CURRENT: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCurrent(returnCallback: any, error: (error: number) => void): void;
		calibrate(returnCallback: any, error: (error: number) => void): void;
		isOverCurrent(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDistanceIR {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DISTANCE: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_DISTANCE_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getDistance(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setSamplingPoint(position: any, distance: any, returnCallback: any, error: (error: number) => void): void;
		getSamplingPoint(position: any, returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDistanceUS {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DISTANCE: number;
		static readonly CALLBACK_DISTANCE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getDistanceValue(returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDMX {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_STARTED: number;
		static readonly CALLBACK_FRAME_AVAILABLE: number;
		static readonly CALLBACK_FRAME_LOW_LEVEL: number;
		static readonly CALLBACK_FRAME_ERROR_COUNT: number;
		static readonly CALLBACK_FRAME: number;
		static readonly DMX_MODE_MASTER: number;
		static readonly DMX_MODE_SLAVE: number;
		static readonly COMMUNICATION_LED_CONFIG_OFF: number;
		static readonly COMMUNICATION_LED_CONFIG_ON: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION: number;
		static readonly ERROR_LED_CONFIG_OFF: number;
		static readonly ERROR_LED_CONFIG_ON: number;
		static readonly ERROR_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly ERROR_LED_CONFIG_SHOW_ERROR: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setDMXMode(dmxMode: any, returnCallback: any, error: (error: number) => void): void;
		getDMXMode(returnCallback: any, error: (error: number) => void): void;
		writeFrameLowLevel(frameLength: any, frameChunkOffset: any, frameChunkData: any, returnCallback: any, error: (error: number) => void): void;
		readFrameLowLevel(returnCallback: any, error: (error: number) => void): void;
		setFrameDuration(frameDuration: any, returnCallback: any, error: (error: number) => void): void;
		getFrameDuration(returnCallback: any, error: (error: number) => void): void;
		getFrameErrorCount(returnCallback: any, error: (error: number) => void): void;
		setCommunicationLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getCommunicationLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setErrorLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getErrorLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setFrameCallbackConfig(frameStartedCallbackEnabled: any, frameAvailableCallbackEnabled: any, frameCallbackEnabled: any, frameErrorCountCallbackEnabled: any, returnCallback: any, error: (error: number) => void): void;
		getFrameCallbackConfig(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		writeFrame(frame: any, returnCallback: any, error: (error: number) => void): void;
		readFrame(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDualButton {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_STATE_CHANGED: number;
		static readonly LED_STATE_AUTO_TOGGLE_ON: number;
		static readonly LED_STATE_AUTO_TOGGLE_OFF: number;
		static readonly LED_STATE_ON: number;
		static readonly LED_STATE_OFF: number;
		static readonly BUTTON_STATE_PRESSED: number;
		static readonly BUTTON_STATE_RELEASED: number;
		static readonly LED_LEFT: number;
		static readonly LED_RIGHT: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setLEDState(ledL: any, ledR: any, returnCallback: any, error: (error: number) => void): void;
		getLEDState(returnCallback: any, error: (error: number) => void): void;
		getButtonState(returnCallback: any, error: (error: number) => void): void;
		setSelectedLEDState(led: any, state: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDualRelay {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setState(relay1: any, relay2: any, returnCallback: any, error: (error: number) => void): void;
		getState(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(relay: any, state: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(relay: any, returnCallback: any, error: (error: number) => void): void;
		setSelectedState(relay: any, state: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletDustDetector {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DUST_DENSITY: number;
		static readonly CALLBACK_DUST_DENSITY_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getDustDensity(returnCallback: any, error: (error: number) => void): void;
		setDustDensityCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDustDensityCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDustDensityCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDustDensityCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletGPS {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_COORDINATES: number;
		static readonly CALLBACK_STATUS: number;
		static readonly CALLBACK_ALTITUDE: number;
		static readonly CALLBACK_MOTION: number;
		static readonly CALLBACK_DATE_TIME: number;
		static readonly FIX_NO_FIX: number;
		static readonly FIX_2D_FIX: number;
		static readonly FIX_3D_FIX: number;
		static readonly RESTART_TYPE_HOT_START: number;
		static readonly RESTART_TYPE_WARM_START: number;
		static readonly RESTART_TYPE_COLD_START: number;
		static readonly RESTART_TYPE_FACTORY_RESET: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCoordinates(returnCallback: any, error: (error: number) => void): void;
		getStatus(returnCallback: any, error: (error: number) => void): void;
		getAltitude(returnCallback: any, error: (error: number) => void): void;
		getMotion(returnCallback: any, error: (error: number) => void): void;
		getDateTime(returnCallback: any, error: (error: number) => void): void;
		restart(restartType: any, returnCallback: any, error: (error: number) => void): void;
		setCoordinatesCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCoordinatesCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setStatusCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getStatusCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAltitudeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAltitudeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setMotionCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getMotionCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDateTimeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDateTimeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletGPSV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_PULSE_PER_SECOND: number;
		static readonly CALLBACK_COORDINATES: number;
		static readonly CALLBACK_STATUS: number;
		static readonly CALLBACK_ALTITUDE: number;
		static readonly CALLBACK_MOTION: number;
		static readonly CALLBACK_DATE_TIME: number;
		static readonly RESTART_TYPE_HOT_START: number;
		static readonly RESTART_TYPE_WARM_START: number;
		static readonly RESTART_TYPE_COLD_START: number;
		static readonly RESTART_TYPE_FACTORY_RESET: number;
		static readonly SATELLITE_SYSTEM_GPS: number;
		static readonly SATELLITE_SYSTEM_GLONASS: number;
		static readonly SATELLITE_SYSTEM_GALILEO: number;
		static readonly FIX_NO_FIX: number;
		static readonly FIX_2D_FIX: number;
		static readonly FIX_3D_FIX: number;
		static readonly FIX_LED_CONFIG_OFF: number;
		static readonly FIX_LED_CONFIG_ON: number;
		static readonly FIX_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly FIX_LED_CONFIG_SHOW_FIX: number;
		static readonly FIX_LED_CONFIG_SHOW_PPS: number;
		static readonly SBAS_ENABLED: number;
		static readonly SBAS_DISABLED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCoordinates(returnCallback: any, error: (error: number) => void): void;
		getStatus(returnCallback: any, error: (error: number) => void): void;
		getAltitude(returnCallback: any, error: (error: number) => void): void;
		getMotion(returnCallback: any, error: (error: number) => void): void;
		getDateTime(returnCallback: any, error: (error: number) => void): void;
		restart(restartType: any, returnCallback: any, error: (error: number) => void): void;
		getSatelliteSystemStatusLowLevel(satelliteSystem: any, returnCallback: any, error: (error: number) => void): void;
		getSatelliteStatus(satelliteSystem: any, satelliteNumber: any, returnCallback: any, error: (error: number) => void): void;
		setFixLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getFixLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setCoordinatesCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCoordinatesCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setStatusCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getStatusCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAltitudeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAltitudeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setMotionCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getMotionCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDateTimeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDateTimeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setSBASConfig(sbasConfig: any, returnCallback: any, error: (error: number) => void): void;
		getSBASConfig(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		getSatelliteSystemStatus(satelliteSystem: any, returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletHallEffect {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_EDGE_COUNT: number;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfig(edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfig(returnCallback: any, error: (error: number) => void): void;
		setEdgeInterrupt(edges: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeInterrupt(returnCallback: any, error: (error: number) => void): void;
		setEdgeCountCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		edgeInterrupt(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletHumidity {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_HUMIDITY: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_HUMIDITY_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getHumidity(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setHumidityCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getHumidityCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setHumidityCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getHumidityCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletHumidityV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_HUMIDITY: number;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly HEATER_CONFIG_DISABLED: number;
		static readonly HEATER_CONFIG_ENABLED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getHumidity(returnCallback: any, error: (error: number) => void): void;
		setHumidityCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getHumidityCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setHeaterConfiguration(heaterConfig: any, returnCallback: any, error: (error: number) => void): void;
		getHeaterConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMovingAverageConfiguration(movingAverageLengthHumidity: any, movingAverageLengthTemperature: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverageConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialAnalogOut {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly VOLTAGE_RANGE_0_TO_5V: number;
		static readonly VOLTAGE_RANGE_0_TO_10V: number;
		static readonly CURRENT_RANGE_4_TO_20MA: number;
		static readonly CURRENT_RANGE_0_TO_20MA: number;
		static readonly CURRENT_RANGE_0_TO_24MA: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		enable(returnCallback: any, error: (error: number) => void): void;
		disable(returnCallback: any, error: (error: number) => void): void;
		isEnabled(returnCallback: any, error: (error: number) => void): void;
		setVoltage(voltage: any, returnCallback: any, error: (error: number) => void): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		setCurrent(current: any, returnCallback: any, error: (error: number) => void): void;
		getCurrent(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(voltageRange: any, currentRange: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialCounter {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_ALL_COUNTER: number;
		static readonly CALLBACK_ALL_SIGNAL_DATA: number;
		static readonly CHANNEL_0: number;
		static readonly CHANNEL_1: number;
		static readonly CHANNEL_2: number;
		static readonly CHANNEL_3: number;
		static readonly COUNT_EDGE_RISING: number;
		static readonly COUNT_EDGE_FALLING: number;
		static readonly COUNT_EDGE_BOTH: number;
		static readonly COUNT_DIRECTION_UP: number;
		static readonly COUNT_DIRECTION_DOWN: number;
		static readonly COUNT_DIRECTION_EXTERNAL_UP: number;
		static readonly COUNT_DIRECTION_EXTERNAL_DOWN: number;
		static readonly DUTY_CYCLE_PRESCALER_1: number;
		static readonly DUTY_CYCLE_PRESCALER_2: number;
		static readonly DUTY_CYCLE_PRESCALER_4: number;
		static readonly DUTY_CYCLE_PRESCALER_8: number;
		static readonly DUTY_CYCLE_PRESCALER_16: number;
		static readonly DUTY_CYCLE_PRESCALER_32: number;
		static readonly DUTY_CYCLE_PRESCALER_64: number;
		static readonly DUTY_CYCLE_PRESCALER_128: number;
		static readonly DUTY_CYCLE_PRESCALER_256: number;
		static readonly DUTY_CYCLE_PRESCALER_512: number;
		static readonly DUTY_CYCLE_PRESCALER_1024: number;
		static readonly DUTY_CYCLE_PRESCALER_2048: number;
		static readonly DUTY_CYCLE_PRESCALER_4096: number;
		static readonly DUTY_CYCLE_PRESCALER_8192: number;
		static readonly DUTY_CYCLE_PRESCALER_16384: number;
		static readonly DUTY_CYCLE_PRESCALER_32768: number;
		static readonly FREQUENCY_INTEGRATION_TIME_128_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_256_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_512_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_1024_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_2048_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_4096_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_8192_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_16384_MS: number;
		static readonly FREQUENCY_INTEGRATION_TIME_32768_MS: number;
		static readonly CHANNEL_LED_CONFIG_OFF: number;
		static readonly CHANNEL_LED_CONFIG_ON: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCounter(channel: any, returnCallback: any, error: (error: number) => void): void;
		getAllCounter(returnCallback: any, error: (error: number) => void): void;
		setCounter(channel: any, counter: any, returnCallback: any, error: (error: number) => void): void;
		setAllCounter(counter: any, returnCallback: any, error: (error: number) => void): void;
		getSignalData(channel: any, returnCallback: any, error: (error: number) => void): void;
		getAllSignalData(returnCallback: any, error: (error: number) => void): void;
		setCounterActive(channel: any, active: any, returnCallback: any, error: (error: number) => void): void;
		setAllCounterActive(active: any, returnCallback: any, error: (error: number) => void): void;
		getCounterActive(channel: any, returnCallback: any, error: (error: number) => void): void;
		getAllCounterActive(returnCallback: any, error: (error: number) => void): void;
		setCounterConfiguration(channel: any, countEdge: any, countDirection: any, dutyCyclePrescaler: any, frequencyIntegrationTime: any, returnCallback: any, error: (error: number) => void): void;
		getCounterConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setAllCounterCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getAllCounterCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setAllSignalDataCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getAllSignalDataCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setChannelLEDConfig(channel: any, config: any, returnCallback: any, error: (error: number) => void): void;
		getChannelLEDConfig(channel: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDigitalIn4 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_INTERRUPT: number;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setGroup(group: any, returnCallback: any, error: (error: number) => void): void;
		getGroup(returnCallback: any, error: (error: number) => void): void;
		getAvailableForGroup(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setInterrupt(interruptMask: any, returnCallback: any, error: (error: number) => void): void;
		getInterrupt(returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(pin: any, resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfig(selectionMask: any, edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfig(pin: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDigitalIn4V2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VALUE: number;
		static readonly CALLBACK_ALL_VALUE: number;
		static readonly CHANNEL_0: number;
		static readonly CHANNEL_1: number;
		static readonly CHANNEL_2: number;
		static readonly CHANNEL_3: number;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;
		static readonly CHANNEL_LED_CONFIG_OFF: number;
		static readonly CHANNEL_LED_CONFIG_ON: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setValueCallbackConfiguration(channel: any, period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getValueCallbackConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setAllValueCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getAllValueCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(channel: any, resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfiguration(channel: any, edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setChannelLEDConfig(channel: any, config: any, returnCallback: any, error: (error: number) => void): void;
		getChannelLEDConfig(channel: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDigitalOut4 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(selectionMask: any, valueMask: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(pin: any, returnCallback: any, error: (error: number) => void): void;
		setGroup(group: any, returnCallback: any, error: (error: number) => void): void;
		getGroup(returnCallback: any, error: (error: number) => void): void;
		getAvailableForGroup(returnCallback: any, error: (error: number) => void): void;
		setSelectedValues(selectionMask: any, valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDual020mA {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CURRENT: number;
		static readonly CALLBACK_CURRENT_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly SAMPLE_RATE_240_SPS: number;
		static readonly SAMPLE_RATE_60_SPS: number;
		static readonly SAMPLE_RATE_15_SPS: number;
		static readonly SAMPLE_RATE_4_SPS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCurrent(sensor: any, returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackPeriod(sensor: any, period: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackPeriod(sensor: any, returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackThreshold(sensor: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackThreshold(sensor: any, returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setSampleRate(rate: any, returnCallback: any, error: (error: number) => void): void;
		getSampleRate(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDualAnalogIn {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_VOLTAGE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly SAMPLE_RATE_976_SPS: number;
		static readonly SAMPLE_RATE_488_SPS: number;
		static readonly SAMPLE_RATE_244_SPS: number;
		static readonly SAMPLE_RATE_122_SPS: number;
		static readonly SAMPLE_RATE_61_SPS: number;
		static readonly SAMPLE_RATE_4_SPS: number;
		static readonly SAMPLE_RATE_2_SPS: number;
		static readonly SAMPLE_RATE_1_SPS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getVoltage(channel: any, returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackPeriod(channel: any, period: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackPeriod(channel: any, returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackThreshold(channel: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackThreshold(channel: any, returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setSampleRate(rate: any, returnCallback: any, error: (error: number) => void): void;
		getSampleRate(returnCallback: any, error: (error: number) => void): void;
		setCalibration(offset: any, gain: any, returnCallback: any, error: (error: number) => void): void;
		getCalibration(returnCallback: any, error: (error: number) => void): void;
		getADCValues(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialDualRelay {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(channel0: any, channel1: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(channel: any, value: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(channel: any, returnCallback: any, error: (error: number) => void): void;
		setSelectedValue(channel: any, value: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialQuadRelay {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(selectionMask: any, valueMask: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(pin: any, returnCallback: any, error: (error: number) => void): void;
		setGroup(group: any, returnCallback: any, error: (error: number) => void): void;
		getGroup(returnCallback: any, error: (error: number) => void): void;
		getAvailableForGroup(returnCallback: any, error: (error: number) => void): void;
		setSelectedValues(selectionMask: any, valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIndustrialQuadRelayV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly CHANNEL_LED_CONFIG_OFF: number;
		static readonly CHANNEL_LED_CONFIG_ON: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly CHANNEL_LED_CONFIG_SHOW_CHANNEL_STATUS: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(value: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(channel: any, value: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(channel: any, returnCallback: any, error: (error: number) => void): void;
		setSelectedValue(channel: any, value: any, returnCallback: any, error: (error: number) => void): void;
		setChannelLEDConfig(led: any, config: any, returnCallback: any, error: (error: number) => void): void;
		getChannelLEDConfig(led: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIO16 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_INTERRUPT: number;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly DIRECTION_IN: string;
		static readonly DIRECTION_OUT: string;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setPort(port: any, valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getPort(port: any, returnCallback: any, error: (error: number) => void): void;
		setPortConfiguration(port: any, selectionMask: any, direction: any, value: any, returnCallback: any, error: (error: number) => void): void;
		getPortConfiguration(port: any, returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setPortInterrupt(port: any, interruptMask: any, returnCallback: any, error: (error: number) => void): void;
		getPortInterrupt(port: any, returnCallback: any, error: (error: number) => void): void;
		setPortMonoflop(port: any, selectionMask: any, valueMask: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getPortMonoflop(port: any, pin: any, returnCallback: any, error: (error: number) => void): void;
		setSelectedValues(port: any, selectionMask: any, valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(pin: any, resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfig(pin: any, edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfig(pin: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIO4 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_INTERRUPT: number;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly DIRECTION_IN: string;
		static readonly DIRECTION_OUT: string;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(selectionMask: any, direction: any, value: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setInterrupt(interruptMask: any, returnCallback: any, error: (error: number) => void): void;
		getInterrupt(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(selectionMask: any, valueMask: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(pin: any, returnCallback: any, error: (error: number) => void): void;
		setSelectedValues(selectionMask: any, valueMask: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(pin: any, resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfig(selectionMask: any, edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfig(pin: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletIO4V2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_INPUT_VALUE: number;
		static readonly CALLBACK_ALL_INPUT_VALUE: number;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly DIRECTION_IN: string;
		static readonly DIRECTION_OUT: string;
		static readonly EDGE_TYPE_RISING: number;
		static readonly EDGE_TYPE_FALLING: number;
		static readonly EDGE_TYPE_BOTH: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setValue(value: any, returnCallback: any, error: (error: number) => void): void;
		getValue(returnCallback: any, error: (error: number) => void): void;
		setSelectedValue(channel: any, value: any, returnCallback: any, error: (error: number) => void): void;
		setConfiguration(channel: any, direction: any, value: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setInputValueCallbackConfiguration(channel: any, period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getInputValueCallbackConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setAllInputValueCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getAllInputValueCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(channel: any, value: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(channel: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCount(channel: any, resetCounter: any, returnCallback: any, error: (error: number) => void): void;
		setEdgeCountConfiguration(channel: any, edgeType: any, debounce: any, returnCallback: any, error: (error: number) => void): void;
		getEdgeCountConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		setPWMConfiguration(channel: any, frequency: any, dutyCycle: any, returnCallback: any, error: (error: number) => void): void;
		getPWMConfiguration(channel: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletJoystick {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_POSITION: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly CALLBACK_PRESSED: number;
		static readonly CALLBACK_RELEASED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getPosition(returnCallback: any, error: (error: number) => void): void;
		isPressed(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		calibrate(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackThreshold(option: any, minX: any, maxX: any, minY: any, maxY: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, minX: any, maxX: any, minY: any, maxY: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLaserRangeFinder {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DISTANCE: number;
		static readonly CALLBACK_VELOCITY: number;
		static readonly CALLBACK_DISTANCE_REACHED: number;
		static readonly CALLBACK_VELOCITY_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly MODE_DISTANCE: number;
		static readonly MODE_VELOCITY_MAX_13MS: number;
		static readonly MODE_VELOCITY_MAX_32MS: number;
		static readonly MODE_VELOCITY_MAX_64MS: number;
		static readonly MODE_VELOCITY_MAX_127MS: number;
		static readonly VERSION_1: number;
		static readonly VERSION_3: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getDistance(returnCallback: any, error: (error: number) => void): void;
		getVelocity(returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setVelocityCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getVelocityCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setDistanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDistanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setVelocityCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVelocityCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(distanceAverageLength: any, velocityAverageLength: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		setMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getMode(returnCallback: any, error: (error: number) => void): void;
		enableLaser(returnCallback: any, error: (error: number) => void): void;
		disableLaser(returnCallback: any, error: (error: number) => void): void;
		isLaserEnabled(returnCallback: any, error: (error: number) => void): void;
		getSensorHardwareVersion(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(acquisitionCount: any, enableQuickTermination: any, thresholdValue: any, measurementFrequency: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLCD16x2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_BUTTON_PRESSED: number;
		static readonly CALLBACK_BUTTON_RELEASED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeLine(line: any, position: any, text: any, returnCallback: any, error: (error: number) => void): void;
		clearDisplay(returnCallback: any, error: (error: number) => void): void;
		backlightOn(returnCallback: any, error: (error: number) => void): void;
		backlightOff(returnCallback: any, error: (error: number) => void): void;
		isBacklightOn(returnCallback: any, error: (error: number) => void): void;
		setConfig(cursor: any, blinking: any, returnCallback: any, error: (error: number) => void): void;
		getConfig(returnCallback: any, error: (error: number) => void): void;
		isButtonPressed(button: any, returnCallback: any, error: (error: number) => void): void;
		setCustomCharacter(index: any, character: any, returnCallback: any, error: (error: number) => void): void;
		getCustomCharacter(index: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLCD20x4 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_BUTTON_PRESSED: number;
		static readonly CALLBACK_BUTTON_RELEASED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeLine(line: any, position: any, text: any, returnCallback: any, error: (error: number) => void): void;
		clearDisplay(returnCallback: any, error: (error: number) => void): void;
		backlightOn(returnCallback: any, error: (error: number) => void): void;
		backlightOff(returnCallback: any, error: (error: number) => void): void;
		isBacklightOn(returnCallback: any, error: (error: number) => void): void;
		setConfig(cursor: any, blinking: any, returnCallback: any, error: (error: number) => void): void;
		getConfig(returnCallback: any, error: (error: number) => void): void;
		isButtonPressed(button: any, returnCallback: any, error: (error: number) => void): void;
		setCustomCharacter(index: any, character: any, returnCallback: any, error: (error: number) => void): void;
		getCustomCharacter(index: any, returnCallback: any, error: (error: number) => void): void;
		setDefaultText(line: any, text: any, returnCallback: any, error: (error: number) => void): void;
		getDefaultText(line: any, returnCallback: any, error: (error: number) => void): void;
		setDefaultTextCounter(counter: any, returnCallback: any, error: (error: number) => void): void;
		getDefaultTextCounter(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLEDStrip {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_RENDERED: number;
		static readonly CHIP_TYPE_WS2801: number;
		static readonly CHIP_TYPE_WS2811: number;
		static readonly CHIP_TYPE_WS2812: number;
		static readonly CHIP_TYPE_LPD8806: number;
		static readonly CHIP_TYPE_APA102: number;
		static readonly CHANNEL_MAPPING_RGB: number;
		static readonly CHANNEL_MAPPING_RBG: number;
		static readonly CHANNEL_MAPPING_BRG: number;
		static readonly CHANNEL_MAPPING_BGR: number;
		static readonly CHANNEL_MAPPING_GRB: number;
		static readonly CHANNEL_MAPPING_GBR: number;
		static readonly CHANNEL_MAPPING_RGBW: number;
		static readonly CHANNEL_MAPPING_RGWB: number;
		static readonly CHANNEL_MAPPING_RBGW: number;
		static readonly CHANNEL_MAPPING_RBWG: number;
		static readonly CHANNEL_MAPPING_RWGB: number;
		static readonly CHANNEL_MAPPING_RWBG: number;
		static readonly CHANNEL_MAPPING_GRWB: number;
		static readonly CHANNEL_MAPPING_GRBW: number;
		static readonly CHANNEL_MAPPING_GBWR: number;
		static readonly CHANNEL_MAPPING_GBRW: number;
		static readonly CHANNEL_MAPPING_GWBR: number;
		static readonly CHANNEL_MAPPING_GWRB: number;
		static readonly CHANNEL_MAPPING_BRGW: number;
		static readonly CHANNEL_MAPPING_BRWG: number;
		static readonly CHANNEL_MAPPING_BGRW: number;
		static readonly CHANNEL_MAPPING_BGWR: number;
		static readonly CHANNEL_MAPPING_BWRG: number;
		static readonly CHANNEL_MAPPING_BWGR: number;
		static readonly CHANNEL_MAPPING_WRBG: number;
		static readonly CHANNEL_MAPPING_WRGB: number;
		static readonly CHANNEL_MAPPING_WGBR: number;
		static readonly CHANNEL_MAPPING_WGRB: number;
		static readonly CHANNEL_MAPPING_WBGR: number;
		static readonly CHANNEL_MAPPING_WBRG: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setRGBValues(index: any, length: any, r: any, g: any, b: any, returnCallback: any, error: (error: number) => void): void;
		getRGBValues(index: any, length: any, returnCallback: any, error: (error: number) => void): void;
		setFrameDuration(duration: any, returnCallback: any, error: (error: number) => void): void;
		getFrameDuration(returnCallback: any, error: (error: number) => void): void;
		getSupplyVoltage(returnCallback: any, error: (error: number) => void): void;
		setClockFrequency(frequency: any, returnCallback: any, error: (error: number) => void): void;
		getClockFrequency(returnCallback: any, error: (error: number) => void): void;
		setChipType(chip: any, returnCallback: any, error: (error: number) => void): void;
		getChipType(returnCallback: any, error: (error: number) => void): void;
		setRGBWValues(index: any, length: any, r: any, g: any, b: any, w: any, returnCallback: any, error: (error: number) => void): void;
		getRGBWValues(index: any, length: any, returnCallback: any, error: (error: number) => void): void;
		setChannelMapping(mapping: any, returnCallback: any, error: (error: number) => void): void;
		getChannelMapping(returnCallback: any, error: (error: number) => void): void;
		enableFrameRenderedCallback(returnCallback: any, error: (error: number) => void): void;
		disableFrameRenderedCallback(returnCallback: any, error: (error: number) => void): void;
		isFrameRenderedCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLEDStripV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_STARTED: number;
		static readonly CHIP_TYPE_WS2801: number;
		static readonly CHIP_TYPE_WS2811: number;
		static readonly CHIP_TYPE_WS2812: number;
		static readonly CHIP_TYPE_LPD8806: number;
		static readonly CHIP_TYPE_APA102: number;
		static readonly CHANNEL_MAPPING_RGB: number;
		static readonly CHANNEL_MAPPING_RBG: number;
		static readonly CHANNEL_MAPPING_BRG: number;
		static readonly CHANNEL_MAPPING_BGR: number;
		static readonly CHANNEL_MAPPING_GRB: number;
		static readonly CHANNEL_MAPPING_GBR: number;
		static readonly CHANNEL_MAPPING_RGBW: number;
		static readonly CHANNEL_MAPPING_RGWB: number;
		static readonly CHANNEL_MAPPING_RBGW: number;
		static readonly CHANNEL_MAPPING_RBWG: number;
		static readonly CHANNEL_MAPPING_RWGB: number;
		static readonly CHANNEL_MAPPING_RWBG: number;
		static readonly CHANNEL_MAPPING_GRWB: number;
		static readonly CHANNEL_MAPPING_GRBW: number;
		static readonly CHANNEL_MAPPING_GBWR: number;
		static readonly CHANNEL_MAPPING_GBRW: number;
		static readonly CHANNEL_MAPPING_GWBR: number;
		static readonly CHANNEL_MAPPING_GWRB: number;
		static readonly CHANNEL_MAPPING_BRGW: number;
		static readonly CHANNEL_MAPPING_BRWG: number;
		static readonly CHANNEL_MAPPING_BGRW: number;
		static readonly CHANNEL_MAPPING_BGWR: number;
		static readonly CHANNEL_MAPPING_BWRG: number;
		static readonly CHANNEL_MAPPING_BWGR: number;
		static readonly CHANNEL_MAPPING_WRBG: number;
		static readonly CHANNEL_MAPPING_WRGB: number;
		static readonly CHANNEL_MAPPING_WGBR: number;
		static readonly CHANNEL_MAPPING_WGRB: number;
		static readonly CHANNEL_MAPPING_WBGR: number;
		static readonly CHANNEL_MAPPING_WBRG: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setLEDValuesLowLevel(index: any, valueLength: any, valueChunkOffset: any, valueChunkData: any, returnCallback: any, error: (error: number) => void): void;
		getLEDValuesLowLevel(index: any, length: any, returnCallback: any, error: (error: number) => void): void;
		setFrameDuration(duration: any, returnCallback: any, error: (error: number) => void): void;
		getFrameDuration(returnCallback: any, error: (error: number) => void): void;
		getSupplyVoltage(returnCallback: any, error: (error: number) => void): void;
		setClockFrequency(frequency: any, returnCallback: any, error: (error: number) => void): void;
		getClockFrequency(returnCallback: any, error: (error: number) => void): void;
		setChipType(chip: any, returnCallback: any, error: (error: number) => void): void;
		getChipType(returnCallback: any, error: (error: number) => void): void;
		setChannelMapping(mapping: any, returnCallback: any, error: (error: number) => void): void;
		getChannelMapping(returnCallback: any, error: (error: number) => void): void;
		setFrameStartedCallbackConfiguration(enable: any, returnCallback: any, error: (error: number) => void): void;
		getFrameStartedCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		setLEDValues(index: any, value: any, returnCallback: any, error: (error: number) => void): void;
		getLEDValues(index: any, length: any, returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLine {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_REFLECTIVITY: number;
		static readonly CALLBACK_REFLECTIVITY_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getReflectivity(returnCallback: any, error: (error: number) => void): void;
		setReflectivityCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getReflectivityCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setReflectivityCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getReflectivityCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLinearPoti {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_POSITION: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getPosition(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLoadCell {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_WEIGHT: number;
		static readonly CALLBACK_WEIGHT_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly RATE_10HZ: number;
		static readonly RATE_80HZ: number;
		static readonly GAIN_128X: number;
		static readonly GAIN_64X: number;
		static readonly GAIN_32X: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getWeight(returnCallback: any, error: (error: number) => void): void;
		setWeightCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getWeightCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setWeightCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getWeightCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		ledOn(returnCallback: any, error: (error: number) => void): void;
		ledOff(returnCallback: any, error: (error: number) => void): void;
		isLEDOn(returnCallback: any, error: (error: number) => void): void;
		calibrate(weight: any, returnCallback: any, error: (error: number) => void): void;
		tare(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(rate: any, gain: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletLoadCellV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_WEIGHT: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly INFO_LED_CONFIG_OFF: number;
		static readonly INFO_LED_CONFIG_ON: number;
		static readonly INFO_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly RATE_10HZ: number;
		static readonly RATE_80HZ: number;
		static readonly GAIN_128X: number;
		static readonly GAIN_64X: number;
		static readonly GAIN_32X: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getWeight(returnCallback: any, error: (error: number) => void): void;
		setWeightCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getWeightCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		setInfoLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getInfoLEDConfig(returnCallback: any, error: (error: number) => void): void;
		calibrate(weight: any, returnCallback: any, error: (error: number) => void): void;
		tare(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(rate: any, gain: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletMoisture {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MOISTURE: number;
		static readonly CALLBACK_MOISTURE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getMoistureValue(returnCallback: any, error: (error: number) => void): void;
		setMoistureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getMoistureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setMoistureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getMoistureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setMovingAverage(average: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletMotionDetector {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MOTION_DETECTED: number;
		static readonly CALLBACK_DETECTION_CYCLE_ENDED: number;
		static readonly MOTION_NOT_DETECTED: number;
		static readonly MOTION_DETECTED: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getMotionDetected(returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletMotionDetectorV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MOTION_DETECTED: number;
		static readonly CALLBACK_DETECTION_CYCLE_ENDED: number;
		static readonly MOTION_NOT_DETECTED: number;
		static readonly MOTION_DETECTED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getMotionDetected(returnCallback: any, error: (error: number) => void): void;
		setSensitivity(sensitivity: any, returnCallback: any, error: (error: number) => void): void;
		getSensitivity(returnCallback: any, error: (error: number) => void): void;
		setIndicator(topLeft: any, topRight: any, bottom: any, returnCallback: any, error: (error: number) => void): void;
		getIndicator(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletMotorizedLinearPoti {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_POSITION: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly DRIVE_MODE_FAST: number;
		static readonly DRIVE_MODE_SMOOTH: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getPosition(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMotorPosition(position: any, driveMode: any, holdPosition: any, returnCallback: any, error: (error: number) => void): void;
		getMotorPosition(returnCallback: any, error: (error: number) => void): void;
		calibrate(returnCallback: any, error: (error: number) => void): void;
		setPositionReachedCallbackConfiguration(enabled: any, returnCallback: any, error: (error: number) => void): void;
		getPositionReachedCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletMultiTouch {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TOUCH_STATE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTouchState(returnCallback: any, error: (error: number) => void): void;
		recalibrate(returnCallback: any, error: (error: number) => void): void;
		setElectrodeConfig(enabledElectrodes: any, returnCallback: any, error: (error: number) => void): void;
		getElectrodeConfig(returnCallback: any, error: (error: number) => void): void;
		setElectrodeSensitivity(sensitivity: any, returnCallback: any, error: (error: number) => void): void;
		getElectrodeSensitivity(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletNFC {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_READER_STATE_CHANGED: number;
		static readonly CALLBACK_CARDEMU_STATE_CHANGED: number;
		static readonly CALLBACK_P2P_STATE_CHANGED: number;
		static readonly MODE_OFF: number;
		static readonly MODE_CARDEMU: number;
		static readonly MODE_P2P: number;
		static readonly MODE_READER: number;
		static readonly TAG_TYPE_MIFARE_CLASSIC: number;
		static readonly TAG_TYPE_TYPE1: number;
		static readonly TAG_TYPE_TYPE2: number;
		static readonly TAG_TYPE_TYPE3: number;
		static readonly TAG_TYPE_TYPE4: number;
		static readonly READER_STATE_INITIALIZATION: number;
		static readonly READER_STATE_IDLE: number;
		static readonly READER_STATE_ERROR: number;
		static readonly READER_STATE_REQUEST_TAG_ID: number;
		static readonly READER_STATE_REQUEST_TAG_ID_READY: number;
		static readonly READER_STATE_REQUEST_TAG_ID_ERROR: number;
		static readonly READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE: number;
		static readonly READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE_READY: number;
		static readonly READER_STATE_AUTHENTICATE_MIFARE_CLASSIC_PAGE_ERROR: number;
		static readonly READER_STATE_WRITE_PAGE: number;
		static readonly READER_STATE_WRITE_PAGE_READY: number;
		static readonly READER_STATE_WRITE_PAGE_ERROR: number;
		static readonly READER_STATE_REQUEST_PAGE: number;
		static readonly READER_STATE_REQUEST_PAGE_READY: number;
		static readonly READER_STATE_REQUEST_PAGE_ERROR: number;
		static readonly READER_STATE_WRITE_NDEF: number;
		static readonly READER_STATE_WRITE_NDEF_READY: number;
		static readonly READER_STATE_WRITE_NDEF_ERROR: number;
		static readonly READER_STATE_REQUEST_NDEF: number;
		static readonly READER_STATE_REQUEST_NDEF_READY: number;
		static readonly READER_STATE_REQUEST_NDEF_ERROR: number;
		static readonly KEY_A: number;
		static readonly KEY_B: number;
		static readonly READER_WRITE_TYPE4_CAPABILITY_CONTAINER: number;
		static readonly READER_WRITE_TYPE4_NDEF: number;
		static readonly READER_REQUEST_TYPE4_CAPABILITY_CONTAINER: number;
		static readonly READER_REQUEST_TYPE4_NDEF: number;
		static readonly CARDEMU_STATE_INITIALIZATION: number;
		static readonly CARDEMU_STATE_IDLE: number;
		static readonly CARDEMU_STATE_ERROR: number;
		static readonly CARDEMU_STATE_DISCOVER: number;
		static readonly CARDEMU_STATE_DISCOVER_READY: number;
		static readonly CARDEMU_STATE_DISCOVER_ERROR: number;
		static readonly CARDEMU_STATE_TRANSFER_NDEF: number;
		static readonly CARDEMU_STATE_TRANSFER_NDEF_READY: number;
		static readonly CARDEMU_STATE_TRANSFER_NDEF_ERROR: number;
		static readonly CARDEMU_TRANSFER_ABORT: number;
		static readonly CARDEMU_TRANSFER_WRITE: number;
		static readonly P2P_STATE_INITIALIZATION: number;
		static readonly P2P_STATE_IDLE: number;
		static readonly P2P_STATE_ERROR: number;
		static readonly P2P_STATE_DISCOVER: number;
		static readonly P2P_STATE_DISCOVER_READY: number;
		static readonly P2P_STATE_DISCOVER_ERROR: number;
		static readonly P2P_STATE_TRANSFER_NDEF: number;
		static readonly P2P_STATE_TRANSFER_NDEF_READY: number;
		static readonly P2P_STATE_TRANSFER_NDEF_ERROR: number;
		static readonly P2P_TRANSFER_ABORT: number;
		static readonly P2P_TRANSFER_WRITE: number;
		static readonly P2P_TRANSFER_READ: number;
		static readonly DETECTION_LED_CONFIG_OFF: number;
		static readonly DETECTION_LED_CONFIG_ON: number;
		static readonly DETECTION_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly DETECTION_LED_CONFIG_SHOW_DETECTION: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getMode(returnCallback: any, error: (error: number) => void): void;
		readerRequestTagID(returnCallback: any, error: (error: number) => void): void;
		readerGetTagIDLowLevel(returnCallback: any, error: (error: number) => void): void;
		readerGetState(returnCallback: any, error: (error: number) => void): void;
		readerWriteNDEFLowLevel(ndefLength: any, ndefChunkOffset: any, ndefChunkData: any, returnCallback: any, error: (error: number) => void): void;
		readerRequestNDEF(returnCallback: any, error: (error: number) => void): void;
		readerReadNDEFLowLevel(returnCallback: any, error: (error: number) => void): void;
		readerAuthenticateMifareClassicPage(page: any, keyNumber: any, key: any, returnCallback: any, error: (error: number) => void): void;
		readerWritePageLowLevel(page: any, dataLength: any, dataChunkOffset: any, dataChunkData: any, returnCallback: any, error: (error: number) => void): void;
		readerRequestPage(page: any, length: any, returnCallback: any, error: (error: number) => void): void;
		readerReadPageLowLevel(returnCallback: any, error: (error: number) => void): void;
		cardemuGetState(returnCallback: any, error: (error: number) => void): void;
		cardemuStartDiscovery(returnCallback: any, error: (error: number) => void): void;
		cardemuWriteNDEFLowLevel(ndefLength: any, ndefChunkOffset: any, ndefChunkData: any, returnCallback: any, error: (error: number) => void): void;
		cardemuStartTransfer(transfer: any, returnCallback: any, error: (error: number) => void): void;
		p2pGetState(returnCallback: any, error: (error: number) => void): void;
		p2pStartDiscovery(returnCallback: any, error: (error: number) => void): void;
		p2pWriteNDEFLowLevel(ndefLength: any, ndefChunkOffset: any, ndefChunkData: any, returnCallback: any, error: (error: number) => void): void;
		p2pStartTransfer(transfer: any, returnCallback: any, error: (error: number) => void): void;
		p2pReadNDEFLowLevel(returnCallback: any, error: (error: number) => void): void;
		setDetectionLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getDetectionLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setMaximumTimeout(timeout: any, returnCallback: any, error: (error: number) => void): void;
		getMaximumTimeout(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		readerGetTagID(returnCallback: any, error: (error: number) => void): void;
		readerWriteNDEF(ndef: any, returnCallback: any, error: (error: number) => void): void;
		readerReadNDEF(returnCallback: any, error: (error: number) => void): void;
		readerWritePage(page: any, data: any, returnCallback: any, error: (error: number) => void): void;
		readerReadPage(returnCallback: any, error: (error: number) => void): void;
		cardemuWriteNDEF(ndef: any, returnCallback: any, error: (error: number) => void): void;
		p2pWriteNDEF(ndef: any, returnCallback: any, error: (error: number) => void): void;
		p2pReadNDEF(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletNFCRFID {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_STATE_CHANGED: number;
		static readonly TAG_TYPE_MIFARE_CLASSIC: number;
		static readonly TAG_TYPE_TYPE1: number;
		static readonly TAG_TYPE_TYPE2: number;
		static readonly STATE_INITIALIZATION: number;
		static readonly STATE_IDLE: number;
		static readonly STATE_ERROR: number;
		static readonly STATE_REQUEST_TAG_ID: number;
		static readonly STATE_REQUEST_TAG_ID_READY: number;
		static readonly STATE_REQUEST_TAG_ID_ERROR: number;
		static readonly STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE: number;
		static readonly STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE_READY: number;
		static readonly STATE_AUTHENTICATING_MIFARE_CLASSIC_PAGE_ERROR: number;
		static readonly STATE_WRITE_PAGE: number;
		static readonly STATE_WRITE_PAGE_READY: number;
		static readonly STATE_WRITE_PAGE_ERROR: number;
		static readonly STATE_REQUEST_PAGE: number;
		static readonly STATE_REQUEST_PAGE_READY: number;
		static readonly STATE_REQUEST_PAGE_ERROR: number;
		static readonly KEY_A: number;
		static readonly KEY_B: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		requestTagID(tagType: any, returnCallback: any, error: (error: number) => void): void;
		getTagID(returnCallback: any, error: (error: number) => void): void;
		getState(returnCallback: any, error: (error: number) => void): void;
		authenticateMifareClassicPage(page: any, keyNumber: any, key: any, returnCallback: any, error: (error: number) => void): void;
		writePage(page: any, data: any, returnCallback: any, error: (error: number) => void): void;
		requestPage(page: any, returnCallback: any, error: (error: number) => void): void;
		getPage(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletOLED128x64 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		write(data: any, returnCallback: any, error: (error: number) => void): void;
		newWindow(columnFrom: any, columnTo: any, rowFrom: any, rowTo: any, returnCallback: any, error: (error: number) => void): void;
		clearDisplay(returnCallback: any, error: (error: number) => void): void;
		setDisplayConfiguration(contrast: any, invert: any, returnCallback: any, error: (error: number) => void): void;
		getDisplayConfiguration(returnCallback: any, error: (error: number) => void): void;
		writeLine(line: any, position: any, text: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletOLED64x48 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		write(data: any, returnCallback: any, error: (error: number) => void): void;
		newWindow(columnFrom: any, columnTo: any, rowFrom: any, rowTo: any, returnCallback: any, error: (error: number) => void): void;
		clearDisplay(returnCallback: any, error: (error: number) => void): void;
		setDisplayConfiguration(contrast: any, invert: any, returnCallback: any, error: (error: number) => void): void;
		getDisplayConfiguration(returnCallback: any, error: (error: number) => void): void;
		writeLine(line: any, position: any, text: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletOutdoorWeather {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_STATION_DATA: number;
		static readonly CALLBACK_SENSOR_DATA: number;
		static readonly WIND_DIRECTION_N: number;
		static readonly WIND_DIRECTION_NNE: number;
		static readonly WIND_DIRECTION_NE: number;
		static readonly WIND_DIRECTION_ENE: number;
		static readonly WIND_DIRECTION_E: number;
		static readonly WIND_DIRECTION_ESE: number;
		static readonly WIND_DIRECTION_SE: number;
		static readonly WIND_DIRECTION_SSE: number;
		static readonly WIND_DIRECTION_S: number;
		static readonly WIND_DIRECTION_SSW: number;
		static readonly WIND_DIRECTION_SW: number;
		static readonly WIND_DIRECTION_WSW: number;
		static readonly WIND_DIRECTION_W: number;
		static readonly WIND_DIRECTION_WNW: number;
		static readonly WIND_DIRECTION_NW: number;
		static readonly WIND_DIRECTION_NNW: number;
		static readonly WIND_DIRECTION_ERROR: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getStationIdentifiersLowLevel(returnCallback: any, error: (error: number) => void): void;
		getSensorIdentifiersLowLevel(returnCallback: any, error: (error: number) => void): void;
		getStationData(identifier: any, returnCallback: any, error: (error: number) => void): void;
		getSensorData(identifier: any, returnCallback: any, error: (error: number) => void): void;
		setStationCallbackConfiguration(enableCallback: any, returnCallback: any, error: (error: number) => void): void;
		getStationCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setSensorCallbackConfiguration(enableCallback: any, returnCallback: any, error: (error: number) => void): void;
		getSensorCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		getStationIdentifiers(returnCallback: any, error: (error: number) => void): void;
		getSensorIdentifiers(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletParticulateMatter {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_PM_CONCENTRATION: number;
		static readonly CALLBACK_PM_COUNT: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getPMConcentration(returnCallback: any, error: (error: number) => void): void;
		getPMCount(returnCallback: any, error: (error: number) => void): void;
		setEnable(enable: any, returnCallback: any, error: (error: number) => void): void;
		getEnable(returnCallback: any, error: (error: number) => void): void;
		getSensorInfo(returnCallback: any, error: (error: number) => void): void;
		setPMConcentrationCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getPMConcentrationCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setPMCountCallbackConfiguration(period: any, valueHasToChange: any, returnCallback: any, error: (error: number) => void): void;
		getPMCountCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletPiezoBuzzer {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_BEEP_FINISHED: number;
		static readonly CALLBACK_MORSE_CODE_FINISHED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		beep(duration: any, returnCallback: any, error: (error: number) => void): void;
		morseCode(morse: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletPiezoSpeaker {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_BEEP_FINISHED: number;
		static readonly CALLBACK_MORSE_CODE_FINISHED: number;
		static readonly BEEP_DURATION_OFF: number;
		static readonly BEEP_DURATION_INFINITE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		beep(duration: any, frequency: any, returnCallback: any, error: (error: number) => void): void;
		morseCode(morse: any, frequency: any, returnCallback: any, error: (error: number) => void): void;
		calibrate(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletPTC {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_TEMPERATURE_REACHED: number;
		static readonly CALLBACK_RESISTANCE: number;
		static readonly CALLBACK_RESISTANCE_REACHED: number;
		static readonly CALLBACK_SENSOR_CONNECTED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly FILTER_OPTION_50HZ: number;
		static readonly FILTER_OPTION_60HZ: number;
		static readonly WIRE_MODE_2: number;
		static readonly WIRE_MODE_3: number;
		static readonly WIRE_MODE_4: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		getResistance(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setResistanceCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getResistanceCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setResistanceCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getResistanceCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setNoiseRejectionFilter(filter: any, returnCallback: any, error: (error: number) => void): void;
		getNoiseRejectionFilter(returnCallback: any, error: (error: number) => void): void;
		isSensorConnected(returnCallback: any, error: (error: number) => void): void;
		setWireMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getWireMode(returnCallback: any, error: (error: number) => void): void;
		setSensorConnectedCallbackConfiguration(enabled: any, returnCallback: any, error: (error: number) => void): void;
		getSensorConnectedCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletPTCV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_RESISTANCE: number;
		static readonly CALLBACK_SENSOR_CONNECTED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly FILTER_OPTION_50HZ: number;
		static readonly FILTER_OPTION_60HZ: number;
		static readonly WIRE_MODE_2: number;
		static readonly WIRE_MODE_3: number;
		static readonly WIRE_MODE_4: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getResistance(returnCallback: any, error: (error: number) => void): void;
		setResistanceCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getResistanceCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setNoiseRejectionFilter(filter: any, returnCallback: any, error: (error: number) => void): void;
		getNoiseRejectionFilter(returnCallback: any, error: (error: number) => void): void;
		isSensorConnected(returnCallback: any, error: (error: number) => void): void;
		setWireMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getWireMode(returnCallback: any, error: (error: number) => void): void;
		setMovingAverageConfiguration(movingAverageLengthResistance: any, movingAverageLengthTemperature: any, returnCallback: any, error: (error: number) => void): void;
		getMovingAverageConfiguration(returnCallback: any, error: (error: number) => void): void;
		setSensorConnectedCallbackConfiguration(enabled: any, returnCallback: any, error: (error: number) => void): void;
		getSensorConnectedCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRealTimeClock {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DATE_TIME: number;
		static readonly CALLBACK_ALARM: number;
		static readonly WEEKDAY_MONDAY: number;
		static readonly WEEKDAY_TUESDAY: number;
		static readonly WEEKDAY_WEDNESDAY: number;
		static readonly WEEKDAY_THURSDAY: number;
		static readonly WEEKDAY_FRIDAY: number;
		static readonly WEEKDAY_SATURDAY: number;
		static readonly WEEKDAY_SUNDAY: number;
		static readonly ALARM_MATCH_DISABLED: number;
		static readonly ALARM_INTERVAL_DISABLED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setDateTime(year: any, month: any, day: any, hour: any, minute: any, second: any, centisecond: any, weekday: any, returnCallback: any, error: (error: number) => void): void;
		getDateTime(returnCallback: any, error: (error: number) => void): void;
		getTimestamp(returnCallback: any, error: (error: number) => void): void;
		setOffset(offset: any, returnCallback: any, error: (error: number) => void): void;
		getOffset(returnCallback: any, error: (error: number) => void): void;
		setDateTimeCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getDateTimeCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAlarm(month: any, day: any, hour: any, minute: any, second: any, weekday: any, interval: any, returnCallback: any, error: (error: number) => void): void;
		getAlarm(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRealTimeClockV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DATE_TIME: number;
		static readonly CALLBACK_ALARM: number;
		static readonly WEEKDAY_MONDAY: number;
		static readonly WEEKDAY_TUESDAY: number;
		static readonly WEEKDAY_WEDNESDAY: number;
		static readonly WEEKDAY_THURSDAY: number;
		static readonly WEEKDAY_FRIDAY: number;
		static readonly WEEKDAY_SATURDAY: number;
		static readonly WEEKDAY_SUNDAY: number;
		static readonly ALARM_MATCH_DISABLED: number;
		static readonly ALARM_INTERVAL_DISABLED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setDateTime(year: any, month: any, day: any, hour: any, minute: any, second: any, centisecond: any, weekday: any, returnCallback: any, error: (error: number) => void): void;
		getDateTime(returnCallback: any, error: (error: number) => void): void;
		getTimestamp(returnCallback: any, error: (error: number) => void): void;
		setOffset(offset: any, returnCallback: any, error: (error: number) => void): void;
		getOffset(returnCallback: any, error: (error: number) => void): void;
		setDateTimeCallbackConfiguration(period: any, returnCallback: any, error: (error: number) => void): void;
		getDateTimeCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setAlarm(month: any, day: any, hour: any, minute: any, second: any, weekday: any, interval: any, returnCallback: any, error: (error: number) => void): void;
		getAlarm(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRemoteSwitch {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_SWITCHING_DONE: number;
		static readonly SWITCH_TO_OFF: number;
		static readonly SWITCH_TO_ON: number;
		static readonly SWITCHING_STATE_READY: number;
		static readonly SWITCHING_STATE_BUSY: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		switchSocket(houseCode: any, receiverCode: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		getSwitchingState(returnCallback: any, error: (error: number) => void): void;
		setRepeats(repeats: any, returnCallback: any, error: (error: number) => void): void;
		getRepeats(returnCallback: any, error: (error: number) => void): void;
		switchSocketA(houseCode: any, receiverCode: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		switchSocketB(address: any, unit: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		dimSocketB(address: any, unit: any, dimValue: any, returnCallback: any, error: (error: number) => void): void;
		switchSocketC(systemCode: any, deviceCode: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRemoteSwitchV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_SWITCHING_DONE: number;
		static readonly CALLBACK_REMOTE_STATUS_A: number;
		static readonly CALLBACK_REMOTE_STATUS_B: number;
		static readonly CALLBACK_REMOTE_STATUS_C: number;
		static readonly SWITCHING_STATE_READY: number;
		static readonly SWITCHING_STATE_BUSY: number;
		static readonly SWITCH_TO_OFF: number;
		static readonly SWITCH_TO_ON: number;
		static readonly REMOTE_TYPE_A: number;
		static readonly REMOTE_TYPE_B: number;
		static readonly REMOTE_TYPE_C: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getSwitchingState(returnCallback: any, error: (error: number) => void): void;
		setRepeats(repeats: any, returnCallback: any, error: (error: number) => void): void;
		getRepeats(returnCallback: any, error: (error: number) => void): void;
		switchSocketA(houseCode: any, receiverCode: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		switchSocketB(address: any, unit: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		dimSocketB(address: any, unit: any, dimValue: any, returnCallback: any, error: (error: number) => void): void;
		switchSocketC(systemCode: any, deviceCode: any, switchTo: any, returnCallback: any, error: (error: number) => void): void;
		setRemoteConfiguration(remoteType: any, minimumRepeats: any, callbackEnabled: any, returnCallback: any, error: (error: number) => void): void;
		getRemoteConfiguration(returnCallback: any, error: (error: number) => void): void;
		getRemoteStatusA(returnCallback: any, error: (error: number) => void): void;
		getRemoteStatusB(returnCallback: any, error: (error: number) => void): void;
		getRemoteStatusC(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRGBLEDButton {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_BUTTON_STATE_CHANGED: number;
		static readonly BUTTON_STATE_PRESSED: number;
		static readonly BUTTON_STATE_RELEASED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setColor(red: any, green: any, blue: any, returnCallback: any, error: (error: number) => void): void;
		getColor(returnCallback: any, error: (error: number) => void): void;
		getButtonState(returnCallback: any, error: (error: number) => void): void;
		setColorCalibration(red: any, green: any, blue: any, returnCallback: any, error: (error: number) => void): void;
		getColorCalibration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRGBLED {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setRGBValue(r: any, g: any, b: any, returnCallback: any, error: (error: number) => void): void;
		getRGBValue(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRGBLEDMatrix {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_FRAME_STARTED: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setRed(red: any, returnCallback: any, error: (error: number) => void): void;
		getRed(returnCallback: any, error: (error: number) => void): void;
		setGreen(green: any, returnCallback: any, error: (error: number) => void): void;
		getGreen(returnCallback: any, error: (error: number) => void): void;
		setBlue(blue: any, returnCallback: any, error: (error: number) => void): void;
		getBlue(returnCallback: any, error: (error: number) => void): void;
		setFrameDuration(frameDuration: any, returnCallback: any, error: (error: number) => void): void;
		getFrameDuration(returnCallback: any, error: (error: number) => void): void;
		drawFrame(returnCallback: any, error: (error: number) => void): void;
		getSupplyVoltage(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRotaryEncoder {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_COUNT: number;
		static readonly CALLBACK_COUNT_REACHED: number;
		static readonly CALLBACK_PRESSED: number;
		static readonly CALLBACK_RELEASED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCount(reset: any, returnCallback: any, error: (error: number) => void): void;
		setCountCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCountCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setCountCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCountCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		isPressed(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRotaryEncoderV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_COUNT: number;
		static readonly CALLBACK_PRESSED: number;
		static readonly CALLBACK_RELEASED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCount(reset: any, returnCallback: any, error: (error: number) => void): void;
		setCountCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCountCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		isPressed(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRotaryPoti {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_POSITION: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_POSITION_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getPosition(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setPositionCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPositionCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRS232 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_READ: number;
		static readonly CALLBACK_ERROR: number;
		static readonly CALLBACK_READ_CALLBACK: number;
		static readonly CALLBACK_ERROR_CALLBACK: number;
		static readonly BAUDRATE_300: number;
		static readonly BAUDRATE_600: number;
		static readonly BAUDRATE_1200: number;
		static readonly BAUDRATE_2400: number;
		static readonly BAUDRATE_4800: number;
		static readonly BAUDRATE_9600: number;
		static readonly BAUDRATE_14400: number;
		static readonly BAUDRATE_19200: number;
		static readonly BAUDRATE_28800: number;
		static readonly BAUDRATE_38400: number;
		static readonly BAUDRATE_57600: number;
		static readonly BAUDRATE_115200: number;
		static readonly BAUDRATE_230400: number;
		static readonly PARITY_NONE: number;
		static readonly PARITY_ODD: number;
		static readonly PARITY_EVEN: number;
		static readonly PARITY_FORCED_PARITY_1: number;
		static readonly PARITY_FORCED_PARITY_0: number;
		static readonly STOPBITS_1: number;
		static readonly STOPBITS_2: number;
		static readonly WORDLENGTH_5: number;
		static readonly WORDLENGTH_6: number;
		static readonly WORDLENGTH_7: number;
		static readonly WORDLENGTH_8: number;
		static readonly HARDWARE_FLOWCONTROL_OFF: number;
		static readonly HARDWARE_FLOWCONTROL_ON: number;
		static readonly SOFTWARE_FLOWCONTROL_OFF: number;
		static readonly SOFTWARE_FLOWCONTROL_ON: number;
		static readonly ERROR_OVERRUN: number;
		static readonly ERROR_PARITY: number;
		static readonly ERROR_FRAMING: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		write(message: any, length: any, returnCallback: any, error: (error: number) => void): void;
		read(returnCallback: any, error: (error: number) => void): void;
		enableReadCallback(returnCallback: any, error: (error: number) => void): void;
		disableReadCallback(returnCallback: any, error: (error: number) => void): void;
		isReadCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(baudrate: any, parity: any, stopbits: any, wordlength: any, hardwareFlowcontrol: any, softwareFlowcontrol: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setBreakCondition(breakTime: any, returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRS232V2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_READ_LOW_LEVEL: number;
		static readonly CALLBACK_ERROR_COUNT: number;
		static readonly CALLBACK_READ: number;
		static readonly PARITY_NONE: number;
		static readonly PARITY_ODD: number;
		static readonly PARITY_EVEN: number;
		static readonly STOPBITS_1: number;
		static readonly STOPBITS_2: number;
		static readonly WORDLENGTH_5: number;
		static readonly WORDLENGTH_6: number;
		static readonly WORDLENGTH_7: number;
		static readonly WORDLENGTH_8: number;
		static readonly FLOWCONTROL_OFF: number;
		static readonly FLOWCONTROL_SOFTWARE: number;
		static readonly FLOWCONTROL_HARDWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeLowLevel(messageLength: any, messageChunkOffset: any, messageChunkData: any, returnCallback: any, error: (error: number) => void): void;
		readLowLevel(length: any, returnCallback: any, error: (error: number) => void): void;
		enableReadCallback(returnCallback: any, error: (error: number) => void): void;
		disableReadCallback(returnCallback: any, error: (error: number) => void): void;
		isReadCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(baudrate: any, parity: any, stopbits: any, wordlength: any, flowcontrol: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setBufferConfig(sendBufferSize: any, receiveBufferSize: any, returnCallback: any, error: (error: number) => void): void;
		getBufferConfig(returnCallback: any, error: (error: number) => void): void;
		getBufferStatus(returnCallback: any, error: (error: number) => void): void;
		getErrorCount(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		write(message: any, returnCallback: any, error: (error: number) => void): void;
		read(length: any, returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletRS485 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_READ_LOW_LEVEL: number;
		static readonly CALLBACK_ERROR_COUNT: number;
		static readonly CALLBACK_MODBUS_SLAVE_READ_COILS_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_COILS_RESPONSE_LOW_LEVEL: number;
		static readonly CALLBACK_MODBUS_SLAVE_READ_HOLDING_REGISTERS_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_HOLDING_REGISTERS_RESPONSE_LOW_LEVEL: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_SINGLE_COIL_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_WRITE_SINGLE_COIL_RESPONSE: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_SINGLE_REGISTER_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_WRITE_SINGLE_REGISTER_RESPONSE: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_MULTIPLE_COILS_REQUEST_LOW_LEVEL: number;
		static readonly CALLBACK_MODBUS_MASTER_WRITE_MULTIPLE_COILS_RESPONSE: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_MULTIPLE_REGISTERS_REQUEST_LOW_LEVEL: number;
		static readonly CALLBACK_MODBUS_MASTER_WRITE_MULTIPLE_REGISTERS_RESPONSE: number;
		static readonly CALLBACK_MODBUS_SLAVE_READ_DISCRETE_INPUTS_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_DISCRETE_INPUTS_RESPONSE_LOW_LEVEL: number;
		static readonly CALLBACK_MODBUS_SLAVE_READ_INPUT_REGISTERS_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_INPUT_REGISTERS_RESPONSE_LOW_LEVEL: number;
		static readonly CALLBACK_READ: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_COILS_RESPONSE: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_HOLDING_REGISTERS_RESPONSE: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_MULTIPLE_COILS_REQUEST: number;
		static readonly CALLBACK_MODBUS_SLAVE_WRITE_MULTIPLE_REGISTERS_REQUEST: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_DISCRETE_INPUTS_RESPONSE: number;
		static readonly CALLBACK_MODBUS_MASTER_READ_INPUT_REGISTERS_RESPONSE: number;
		static readonly PARITY_NONE: number;
		static readonly PARITY_ODD: number;
		static readonly PARITY_EVEN: number;
		static readonly STOPBITS_1: number;
		static readonly STOPBITS_2: number;
		static readonly WORDLENGTH_5: number;
		static readonly WORDLENGTH_6: number;
		static readonly WORDLENGTH_7: number;
		static readonly WORDLENGTH_8: number;
		static readonly DUPLEX_HALF: number;
		static readonly DUPLEX_FULL: number;
		static readonly MODE_RS485: number;
		static readonly MODE_MODBUS_MASTER_RTU: number;
		static readonly MODE_MODBUS_SLAVE_RTU: number;
		static readonly COMMUNICATION_LED_CONFIG_OFF: number;
		static readonly COMMUNICATION_LED_CONFIG_ON: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly COMMUNICATION_LED_CONFIG_SHOW_COMMUNICATION: number;
		static readonly ERROR_LED_CONFIG_OFF: number;
		static readonly ERROR_LED_CONFIG_ON: number;
		static readonly ERROR_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly ERROR_LED_CONFIG_SHOW_ERROR: number;
		static readonly EXCEPTION_CODE_TIMEOUT: number;
		static readonly EXCEPTION_CODE_SUCCESS: number;
		static readonly EXCEPTION_CODE_ILLEGAL_FUNCTION: number;
		static readonly EXCEPTION_CODE_ILLEGAL_DATA_ADDRESS: number;
		static readonly EXCEPTION_CODE_ILLEGAL_DATA_VALUE: number;
		static readonly EXCEPTION_CODE_SLAVE_DEVICE_FAILURE: number;
		static readonly EXCEPTION_CODE_ACKNOWLEDGE: number;
		static readonly EXCEPTION_CODE_SLAVE_DEVICE_BUSY: number;
		static readonly EXCEPTION_CODE_MEMORY_PARITY_ERROR: number;
		static readonly EXCEPTION_CODE_GATEWAY_PATH_UNAVAILABLE: number;
		static readonly EXCEPTION_CODE_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		writeLowLevel(messageLength: any, messageChunkOffset: any, messageChunkData: any, returnCallback: any, error: (error: number) => void): void;
		readLowLevel(length: any, returnCallback: any, error: (error: number) => void): void;
		enableReadCallback(returnCallback: any, error: (error: number) => void): void;
		disableReadCallback(returnCallback: any, error: (error: number) => void): void;
		isReadCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		setRS485Configuration(baudrate: any, parity: any, stopbits: any, wordlength: any, duplex: any, returnCallback: any, error: (error: number) => void): void;
		getRS485Configuration(returnCallback: any, error: (error: number) => void): void;
		setModbusConfiguration(slaveAddress: any, masterRequestTimeout: any, returnCallback: any, error: (error: number) => void): void;
		getModbusConfiguration(returnCallback: any, error: (error: number) => void): void;
		setMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getMode(returnCallback: any, error: (error: number) => void): void;
		setCommunicationLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getCommunicationLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setErrorLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getErrorLEDConfig(returnCallback: any, error: (error: number) => void): void;
		setBufferConfig(sendBufferSize: any, receiveBufferSize: any, returnCallback: any, error: (error: number) => void): void;
		getBufferConfig(returnCallback: any, error: (error: number) => void): void;
		getBufferStatus(returnCallback: any, error: (error: number) => void): void;
		enableErrorCountCallback(returnCallback: any, error: (error: number) => void): void;
		disableErrorCountCallback(returnCallback: any, error: (error: number) => void): void;
		isErrorCountCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		getErrorCount(returnCallback: any, error: (error: number) => void): void;
		getModbusCommonErrorCount(returnCallback: any, error: (error: number) => void): void;
		modbusSlaveReportException(requestID: any, exceptionCode: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadCoilsRequestLowLevel(requestID: any, coilsLength: any, coilsChunkOffset: any, coilsChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterReadCoils(slaveAddress: any, startingAddress: any, count: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadHoldingRegistersRequestLowLevel(requestID: any, holdingRegistersLength: any, holdingRegistersChunkOffset: any, holdingRegistersChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterReadHoldingRegisters(slaveAddress: any, startingAddress: any, count: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerWriteSingleCoilRequest(requestID: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteSingleCoil(slaveAddress: any, coilAddress: any, coilValue: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerWriteSingleRegisterRequest(requestID: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteSingleRegister(slaveAddress: any, registerAddress: any, registerValue: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerWriteMultipleCoilsRequest(requestID: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteMultipleCoilsLowLevel(slaveAddress: any, startingAddress: any, coilsLength: any, coilsChunkOffset: any, coilsChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerWriteMultipleRegistersRequest(requestID: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteMultipleRegistersLowLevel(slaveAddress: any, startingAddress: any, registersLength: any, registersChunkOffset: any, registersChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadDiscreteInputsRequestLowLevel(requestID: any, discreteInputsLength: any, discreteInputsChunkOffset: any, discreteInputsChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterReadDiscreteInputs(slaveAddress: any, startingAddress: any, count: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadInputRegistersRequestLowLevel(requestID: any, inputRegistersLength: any, inputRegistersChunkOffset: any, inputRegistersChunkData: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterReadInputRegisters(slaveAddress: any, startingAddress: any, count: any, returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		write(message: any, returnCallback: any, error: (error: number) => void): void;
		read(length: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadCoilsRequest(requestID: any, coils: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadHoldingRegistersRequest(requestID: any, holdingRegisters: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteMultipleCoils(slaveAddress: any, startingAddress: any, coils: any, returnCallback: any, error: (error: number) => void): void;
		modbusMasterWriteMultipleRegisters(slaveAddress: any, startingAddress: any, registers: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadDiscreteInputsRequest(requestID: any, discreteInputs: any, returnCallback: any, error: (error: number) => void): void;
		modbusSlaveAnswerReadInputRegistersRequest(requestID: any, inputRegisters: any, returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletSegmentDisplay4x7 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_COUNTER_FINISHED: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setSegments(segments: any, brightness: any, colon: any, returnCallback: any, error: (error: number) => void): void;
		getSegments(returnCallback: any, error: (error: number) => void): void;
		startCounter(valueFrom: any, valueTo: any, increment: any, length: any, returnCallback: any, error: (error: number) => void): void;
		getCounterValue(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletSolidStateRelay {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setState(state: any, returnCallback: any, error: (error: number) => void): void;
		getState(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(state: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletSolidStateRelayV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_MONOFLOP_DONE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		setState(state: any, returnCallback: any, error: (error: number) => void): void;
		getState(returnCallback: any, error: (error: number) => void): void;
		setMonoflop(state: any, time: any, returnCallback: any, error: (error: number) => void): void;
		getMonoflop(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletSoundIntensity {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_INTENSITY: number;
		static readonly CALLBACK_INTENSITY_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getIntensity(returnCallback: any, error: (error: number) => void): void;
		setIntensityCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getIntensityCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setIntensityCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getIntensityCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletSoundPressureLevel {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_DECIBEL: number;
		static readonly CALLBACK_SPECTRUM_LOW_LEVEL: number;
		static readonly CALLBACK_SPECTRUM: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly FFT_SIZE_128: number;
		static readonly FFT_SIZE_256: number;
		static readonly FFT_SIZE_512: number;
		static readonly FFT_SIZE_1024: number;
		static readonly WEIGHTING_A: number;
		static readonly WEIGHTING_B: number;
		static readonly WEIGHTING_C: number;
		static readonly WEIGHTING_D: number;
		static readonly WEIGHTING_Z: number;
		static readonly WEIGHTING_ITU_R_468: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getDecibel(returnCallback: any, error: (error: number) => void): void;
		setDecibelCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getDecibelCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSpectrumLowLevel(returnCallback: any, error: (error: number) => void): void;
		setSpectrumCallbackConfiguration(period: any, returnCallback: any, error: (error: number) => void): void;
		getSpectrumCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(fftSize: any, weighting: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		getSpectrum(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletTemperature {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_TEMPERATURE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly I2C_MODE_FAST: number;
		static readonly I2C_MODE_SLOW: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setI2CMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getI2CMode(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletTemperatureIR {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_AMBIENT_TEMPERATURE: number;
		static readonly CALLBACK_OBJECT_TEMPERATURE: number;
		static readonly CALLBACK_AMBIENT_TEMPERATURE_REACHED: number;
		static readonly CALLBACK_OBJECT_TEMPERATURE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAmbientTemperature(returnCallback: any, error: (error: number) => void): void;
		getObjectTemperature(returnCallback: any, error: (error: number) => void): void;
		setEmissivity(emissivity: any, returnCallback: any, error: (error: number) => void): void;
		getEmissivity(returnCallback: any, error: (error: number) => void): void;
		setAmbientTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAmbientTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setObjectTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getObjectTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAmbientTemperatureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAmbientTemperatureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setObjectTemperatureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getObjectTemperatureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletTemperatureIRV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_AMBIENT_TEMPERATURE: number;
		static readonly CALLBACK_OBJECT_TEMPERATURE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getAmbientTemperature(returnCallback: any, error: (error: number) => void): void;
		setAmbientTemperatureCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAmbientTemperatureCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getObjectTemperature(returnCallback: any, error: (error: number) => void): void;
		setObjectTemperatureCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getObjectTemperatureCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setEmissivity(emissivity: any, returnCallback: any, error: (error: number) => void): void;
		getEmissivity(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletThermalImaging {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_HIGH_CONTRAST_IMAGE_LOW_LEVEL: number;
		static readonly CALLBACK_TEMPERATURE_IMAGE_LOW_LEVEL: number;
		static readonly CALLBACK_HIGH_CONTRAST_IMAGE: number;
		static readonly CALLBACK_TEMPERATURE_IMAGE: number;
		static readonly RESOLUTION_0_TO_6553_KELVIN: number;
		static readonly RESOLUTION_0_TO_655_KELVIN: number;
		static readonly FFC_STATUS_NEVER_COMMANDED: number;
		static readonly FFC_STATUS_IMMINENT: number;
		static readonly FFC_STATUS_IN_PROGRESS: number;
		static readonly FFC_STATUS_COMPLETE: number;
		static readonly IMAGE_TRANSFER_MANUAL_HIGH_CONTRAST_IMAGE: number;
		static readonly IMAGE_TRANSFER_MANUAL_TEMPERATURE_IMAGE: number;
		static readonly IMAGE_TRANSFER_CALLBACK_HIGH_CONTRAST_IMAGE: number;
		static readonly IMAGE_TRANSFER_CALLBACK_TEMPERATURE_IMAGE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getHighContrastImageLowLevel(returnCallback: any, error: (error: number) => void): void;
		getTemperatureImageLowLevel(returnCallback: any, error: (error: number) => void): void;
		getStatistics(returnCallback: any, error: (error: number) => void): void;
		setResolution(resolution: any, returnCallback: any, error: (error: number) => void): void;
		getResolution(returnCallback: any, error: (error: number) => void): void;
		setSpotmeterConfig(regionOfInterest: any, returnCallback: any, error: (error: number) => void): void;
		getSpotmeterConfig(returnCallback: any, error: (error: number) => void): void;
		setHighContrastConfig(regionOfInterest: any, dampeningFactor: any, clipLimit: any, emptyCounts: any, returnCallback: any, error: (error: number) => void): void;
		getHighContrastConfig(returnCallback: any, error: (error: number) => void): void;
		setImageTransferConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getImageTransferConfig(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
		getHighContrastImage(returnCallback: any, error: (error: number) => void): void;
		getTemperatureImage(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletThermocouple {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_TEMPERATURE_REACHED: number;
		static readonly CALLBACK_ERROR_STATE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly AVERAGING_1: number;
		static readonly AVERAGING_2: number;
		static readonly AVERAGING_4: number;
		static readonly AVERAGING_8: number;
		static readonly AVERAGING_16: number;
		static readonly TYPE_B: number;
		static readonly TYPE_E: number;
		static readonly TYPE_J: number;
		static readonly TYPE_K: number;
		static readonly TYPE_N: number;
		static readonly TYPE_R: number;
		static readonly TYPE_S: number;
		static readonly TYPE_T: number;
		static readonly TYPE_G8: number;
		static readonly TYPE_G32: number;
		static readonly FILTER_OPTION_50HZ: number;
		static readonly FILTER_OPTION_60HZ: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(averaging: any, thermocoupleType: any, filter: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getErrorState(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletThermocoupleV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TEMPERATURE: number;
		static readonly CALLBACK_ERROR_STATE: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly AVERAGING_1: number;
		static readonly AVERAGING_2: number;
		static readonly AVERAGING_4: number;
		static readonly AVERAGING_8: number;
		static readonly AVERAGING_16: number;
		static readonly TYPE_B: number;
		static readonly TYPE_E: number;
		static readonly TYPE_J: number;
		static readonly TYPE_K: number;
		static readonly TYPE_N: number;
		static readonly TYPE_R: number;
		static readonly TYPE_S: number;
		static readonly TYPE_T: number;
		static readonly TYPE_G8: number;
		static readonly TYPE_G32: number;
		static readonly FILTER_OPTION_50HZ: number;
		static readonly FILTER_OPTION_60HZ: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTemperature(returnCallback: any, error: (error: number) => void): void;
		setTemperatureCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getTemperatureCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(averaging: any, thermocoupleType: any, filter: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		getErrorState(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletTilt {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_TILT_STATE: number;
		static readonly TILT_STATE_CLOSED: number;
		static readonly TILT_STATE_OPEN: number;
		static readonly TILT_STATE_CLOSED_VIBRATING: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getTiltState(returnCallback: any, error: (error: number) => void): void;
		enableTiltStateCallback(returnCallback: any, error: (error: number) => void): void;
		disableTiltStateCallback(returnCallback: any, error: (error: number) => void): void;
		isTiltStateCallbackEnabled(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletUVLight {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_UV_LIGHT: number;
		static readonly CALLBACK_UV_LIGHT_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getUVLight(returnCallback: any, error: (error: number) => void): void;
		setUVLightCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getUVLightCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setUVLightCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getUVLightCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletVoltage {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_ANALOG_VALUE: number;
		static readonly CALLBACK_VOLTAGE_REACHED: number;
		static readonly CALLBACK_ANALOG_VALUE_REACHED: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		getAnalogValue(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setAnalogValueCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getAnalogValueCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletVoltageCurrent {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CURRENT: number;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_POWER: number;
		static readonly CALLBACK_CURRENT_REACHED: number;
		static readonly CALLBACK_VOLTAGE_REACHED: number;
		static readonly CALLBACK_POWER_REACHED: number;
		static readonly AVERAGING_1: number;
		static readonly AVERAGING_4: number;
		static readonly AVERAGING_16: number;
		static readonly AVERAGING_64: number;
		static readonly AVERAGING_128: number;
		static readonly AVERAGING_256: number;
		static readonly AVERAGING_512: number;
		static readonly AVERAGING_1024: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCurrent(returnCallback: any, error: (error: number) => void): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		getPower(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(averaging: any, voltageConversionTime: any, currentConversionTime: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setCalibration(gainMultiplier: any, gainDivisor: any, returnCallback: any, error: (error: number) => void): void;
		getCalibration(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setPowerCallbackPeriod(period: any, returnCallback: any, error: (error: number) => void): void;
		getPowerCallbackPeriod(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setPowerCallbackThreshold(option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPowerCallbackThreshold(returnCallback: any, error: (error: number) => void): void;
		setDebouncePeriod(debounce: any, returnCallback: any, error: (error: number) => void): void;
		getDebouncePeriod(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export class BrickletVoltageCurrentV2 {
		static readonly DEVICE_IDENTIFIER: number;
		static readonly DEVICE_DISPLAY_NAME: string;
		static readonly CALLBACK_CURRENT: number;
		static readonly CALLBACK_VOLTAGE: number;
		static readonly CALLBACK_POWER: number;
		static readonly THRESHOLD_OPTION_OFF: string;
		static readonly THRESHOLD_OPTION_OUTSIDE: string;
		static readonly THRESHOLD_OPTION_INSIDE: string;
		static readonly THRESHOLD_OPTION_SMALLER: string;
		static readonly THRESHOLD_OPTION_GREATER: string;
		static readonly AVERAGING_1: number;
		static readonly AVERAGING_4: number;
		static readonly AVERAGING_16: number;
		static readonly AVERAGING_64: number;
		static readonly AVERAGING_128: number;
		static readonly AVERAGING_256: number;
		static readonly AVERAGING_512: number;
		static readonly AVERAGING_1024: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER: number;
		static readonly BOOTLOADER_MODE_FIRMWARE: number;
		static readonly BOOTLOADER_MODE_BOOTLOADER_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_REBOOT: number;
		static readonly BOOTLOADER_MODE_FIRMWARE_WAIT_FOR_ERASE_AND_REBOOT: number;
		static readonly BOOTLOADER_STATUS_OK: number;
		static readonly BOOTLOADER_STATUS_INVALID_MODE: number;
		static readonly BOOTLOADER_STATUS_NO_CHANGE: number;
		static readonly BOOTLOADER_STATUS_ENTRY_FUNCTION_NOT_PRESENT: number;
		static readonly BOOTLOADER_STATUS_DEVICE_IDENTIFIER_INCORRECT: number;
		static readonly BOOTLOADER_STATUS_CRC_MISMATCH: number;
		static readonly STATUS_LED_CONFIG_OFF: number;
		static readonly STATUS_LED_CONFIG_ON: number;
		static readonly STATUS_LED_CONFIG_SHOW_HEARTBEAT: number;
		static readonly STATUS_LED_CONFIG_SHOW_STATUS: number;

		constructor(uid: string|number, ip: IPConnection);

		getDeviceOID(): void;
		getAPIVersion(): void;
		on(callbackID: any, function_: any): void;
		getResponseExpected(functionID: any, error: (error: number) => void): void;
		setResponseExpected(functionID: any, responseBoolean: any, error: (error: number) => void): void;
		setResponseExpectedAll(responseBoolean: any): void;
		resetStreamStateObject(streamStateObject: any): void;
		getCurrent(returnCallback: any, error: (error: number) => void): void;
		setCurrentCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getCurrentCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getVoltage(returnCallback: any, error: (error: number) => void): void;
		setVoltageCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getVoltageCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		getPower(returnCallback: any, error: (error: number) => void): void;
		setPowerCallbackConfiguration(period: any, valueHasToChange: any, option: any, min: any, max: any, returnCallback: any, error: (error: number) => void): void;
		getPowerCallbackConfiguration(returnCallback: any, error: (error: number) => void): void;
		setConfiguration(averaging: any, voltageConversionTime: any, currentConversionTime: any, returnCallback: any, error: (error: number) => void): void;
		getConfiguration(returnCallback: any, error: (error: number) => void): void;
		setCalibration(voltageMultiplier: any, voltageDivisor: any, currentMultiplier: any, currentDivisor: any, returnCallback: any, error: (error: number) => void): void;
		getCalibration(returnCallback: any, error: (error: number) => void): void;
		getSPITFPErrorCount(returnCallback: any, error: (error: number) => void): void;
		setBootloaderMode(mode: any, returnCallback: any, error: (error: number) => void): void;
		getBootloaderMode(returnCallback: any, error: (error: number) => void): void;
		setWriteFirmwarePointer(pointer: any, returnCallback: any, error: (error: number) => void): void;
		writeFirmware(data: any, returnCallback: any, error: (error: number) => void): void;
		setStatusLEDConfig(config: any, returnCallback: any, error: (error: number) => void): void;
		getStatusLEDConfig(returnCallback: any, error: (error: number) => void): void;
		getChipTemperature(returnCallback: any, error: (error: number) => void): void;
		reset(returnCallback: any, error: (error: number) => void): void;
		writeUID(uid: any, returnCallback: any, error: (error: number) => void): void;
		readUID(returnCallback: any, error: (error: number) => void): void;
		getIdentity(returnCallback: any, error: (error: number) => void): void;
	}

	export type All = IPConnection | BrickDC | BrickIMU | BrickIMUV2 | BrickMaster | BrickRED | BrickServo | BrickSilentStepper | BrickStepper | BrickletAccelerometer | BrickletAmbientLight | BrickletAmbientLightV2 | BrickletAnalogIn | BrickletAnalogInV2 | BrickletAnalogInV3 | BrickletAnalogOut | BrickletAnalogOutV2 | BrickletBarometer | BrickletCAN | BrickletCANV2 | BrickletCO2 | BrickletColor | BrickletCurrent12 | BrickletCurrent25 | BrickletDistanceIR | BrickletDistanceUS | BrickletDMX | BrickletDualButton | BrickletDualRelay | BrickletDustDetector | BrickletGPS | BrickletGPSV2 | BrickletHallEffect | BrickletHumidity | BrickletHumidityV2 | BrickletIndustrialAnalogOut | BrickletIndustrialCounter | BrickletIndustrialDigitalIn4 | BrickletIndustrialDigitalIn4V2 | BrickletIndustrialDigitalOut4 | BrickletIndustrialDual020mA | BrickletIndustrialDualAnalogIn | BrickletIndustrialDualRelay | BrickletIndustrialQuadRelay | BrickletIndustrialQuadRelayV2 | BrickletIO16 | BrickletIO4 | BrickletIO4V2 | BrickletJoystick | BrickletLaserRangeFinder | BrickletLCD16x2 | BrickletLCD20x4 | BrickletLEDStrip | BrickletLEDStripV2 | BrickletLine | BrickletLinearPoti | BrickletLoadCell | BrickletLoadCellV2 | BrickletMoisture | BrickletMotionDetector | BrickletMotionDetectorV2 | BrickletMotorizedLinearPoti | BrickletMultiTouch | BrickletNFC | BrickletNFCRFID | BrickletOLED128x64 | BrickletOLED64x48 | BrickletOutdoorWeather | BrickletParticulateMatter | BrickletPiezoBuzzer | BrickletPiezoSpeaker | BrickletPTC | BrickletPTCV2 | BrickletRealTimeClock | BrickletRealTimeClockV2 | BrickletRemoteSwitch | BrickletRemoteSwitchV2 | BrickletRGBLEDButton | BrickletRGBLED | BrickletRGBLEDMatrix | BrickletRotaryEncoder | BrickletRotaryEncoderV2 | BrickletRotaryPoti | BrickletRS232 | BrickletRS232V2 | BrickletRS485 | BrickletSegmentDisplay4x7 | BrickletSolidStateRelay | BrickletSolidStateRelayV2 | BrickletSoundIntensity | BrickletSoundPressureLevel | BrickletTemperature | BrickletTemperatureIR | BrickletTemperatureIRV2 | BrickletThermalImaging | BrickletThermocouple | BrickletThermocoupleV2 | BrickletTilt | BrickletUVLight | BrickletVoltage | BrickletVoltageCurrent | BrickletVoltageCurrentV2
}
